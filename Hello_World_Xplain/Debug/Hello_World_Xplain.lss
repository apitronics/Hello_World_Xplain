
Hello_World_Xplain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b9c  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  00001b9c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000008c  2000000c  00001ba8  0001000c  2**2
                  ALLOC
  3 .stack        00002000  20000098  00001c34  0001000c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0001000c  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010034  2**0
                  CONTENTS, READONLY
  6 .debug_info   00015a2e  00000000  00000000  0001008f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001f1a  00000000  00000000  00025abd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000041b1  00000000  00000000  000279d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000378  00000000  00000000  0002bb88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000003b8  00000000  00000000  0002bf00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00018671  00000000  00000000  0002c2b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00008876  00000000  00000000  00044929  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008931c  00000000  00000000  0004d19f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000914  00000000  00000000  000d64bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002098 	.word	0x20002098
       4:	000013ad 	.word	0x000013ad
       8:	000013a9 	.word	0x000013a9
       c:	000013a9 	.word	0x000013a9
	...
      2c:	000013a9 	.word	0x000013a9
	...
      38:	000013a9 	.word	0x000013a9
      3c:	000013a9 	.word	0x000013a9
      40:	000013a9 	.word	0x000013a9
      44:	000013a9 	.word	0x000013a9
      48:	000013a9 	.word	0x000013a9
      4c:	000013a9 	.word	0x000013a9
      50:	000013a9 	.word	0x000013a9
      54:	000013a9 	.word	0x000013a9
      58:	000013a9 	.word	0x000013a9
      5c:	000013a9 	.word	0x000013a9
      60:	000013a9 	.word	0x000013a9
      64:	000013a9 	.word	0x000013a9
      68:	000013a9 	.word	0x000013a9
      6c:	000013a9 	.word	0x000013a9
      70:	000013a9 	.word	0x000013a9
      74:	000013a9 	.word	0x000013a9
      78:	000013a9 	.word	0x000013a9
      7c:	000013a9 	.word	0x000013a9
      80:	000013a9 	.word	0x000013a9
      84:	000013a9 	.word	0x000013a9
      88:	000013a9 	.word	0x000013a9
      8c:	000013a9 	.word	0x000013a9
      90:	000013a9 	.word	0x000013a9
      94:	000013a9 	.word	0x000013a9
      98:	000013a9 	.word	0x000013a9
      9c:	000013a9 	.word	0x000013a9
      a0:	000013a9 	.word	0x000013a9
      a4:	000013a9 	.word	0x000013a9
      a8:	000013a9 	.word	0x000013a9
      ac:	000013a9 	.word	0x000013a9

000000b0 <__do_global_dtors_aux>:
      b0:	b510      	push	{r4, lr}
      b2:	4c06      	ldr	r4, [pc, #24]	; (cc <__do_global_dtors_aux+0x1c>)
      b4:	7823      	ldrb	r3, [r4, #0]
      b6:	2b00      	cmp	r3, #0
      b8:	d107      	bne.n	ca <__do_global_dtors_aux+0x1a>
      ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <__do_global_dtors_aux+0x20>)
      bc:	2b00      	cmp	r3, #0
      be:	d002      	beq.n	c6 <__do_global_dtors_aux+0x16>
      c0:	4804      	ldr	r0, [pc, #16]	; (d4 <__do_global_dtors_aux+0x24>)
      c2:	e000      	b.n	c6 <__do_global_dtors_aux+0x16>
      c4:	bf00      	nop
      c6:	2301      	movs	r3, #1
      c8:	7023      	strb	r3, [r4, #0]
      ca:	bd10      	pop	{r4, pc}
      cc:	2000000c 	.word	0x2000000c
      d0:	00000000 	.word	0x00000000
      d4:	00001b9c 	.word	0x00001b9c

000000d8 <frame_dummy>:
      d8:	b508      	push	{r3, lr}
      da:	4b08      	ldr	r3, [pc, #32]	; (fc <frame_dummy+0x24>)
      dc:	2b00      	cmp	r3, #0
      de:	d003      	beq.n	e8 <frame_dummy+0x10>
      e0:	4807      	ldr	r0, [pc, #28]	; (100 <frame_dummy+0x28>)
      e2:	4908      	ldr	r1, [pc, #32]	; (104 <frame_dummy+0x2c>)
      e4:	e000      	b.n	e8 <frame_dummy+0x10>
      e6:	bf00      	nop
      e8:	4807      	ldr	r0, [pc, #28]	; (108 <frame_dummy+0x30>)
      ea:	6803      	ldr	r3, [r0, #0]
      ec:	2b00      	cmp	r3, #0
      ee:	d003      	beq.n	f8 <frame_dummy+0x20>
      f0:	4b06      	ldr	r3, [pc, #24]	; (10c <frame_dummy+0x34>)
      f2:	2b00      	cmp	r3, #0
      f4:	d000      	beq.n	f8 <frame_dummy+0x20>
      f6:	4798      	blx	r3
      f8:	bd08      	pop	{r3, pc}
      fa:	46c0      	nop			; (mov r8, r8)
      fc:	00000000 	.word	0x00000000
     100:	00001b9c 	.word	0x00001b9c
     104:	20000010 	.word	0x20000010
     108:	00001b9c 	.word	0x00001b9c
     10c:	00000000 	.word	0x00000000

00000110 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     110:	b510      	push	{r4, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     112:	2000      	movs	r0, #0
     114:	4b08      	ldr	r3, [pc, #32]	; (138 <delay_init+0x28>)
     116:	4798      	blx	r3
	cycles_per_ms /= 1000;
     118:	4c08      	ldr	r4, [pc, #32]	; (13c <delay_init+0x2c>)
     11a:	21fa      	movs	r1, #250	; 0xfa
     11c:	0089      	lsls	r1, r1, #2
     11e:	47a0      	blx	r4
     120:	4b07      	ldr	r3, [pc, #28]	; (140 <delay_init+0x30>)
     122:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     124:	21fa      	movs	r1, #250	; 0xfa
     126:	0089      	lsls	r1, r1, #2
     128:	47a0      	blx	r4
     12a:	4b06      	ldr	r3, [pc, #24]	; (144 <delay_init+0x34>)
     12c:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     12e:	2205      	movs	r2, #5
     130:	4b05      	ldr	r3, [pc, #20]	; (148 <delay_init+0x38>)
     132:	601a      	str	r2, [r3, #0]
}
     134:	bd10      	pop	{r4, pc}
     136:	46c0      	nop			; (mov r8, r8)
     138:	00001161 	.word	0x00001161
     13c:	00001655 	.word	0x00001655
     140:	20000004 	.word	0x20000004
     144:	20000000 	.word	0x20000000
     148:	e000e010 	.word	0xe000e010

0000014c <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     14c:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     14e:	4b08      	ldr	r3, [pc, #32]	; (170 <delay_cycles_ms+0x24>)
     150:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     152:	4a08      	ldr	r2, [pc, #32]	; (174 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     154:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     156:	2180      	movs	r1, #128	; 0x80
     158:	0249      	lsls	r1, r1, #9
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
     15a:	e006      	b.n	16a <delay_cycles_ms+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     15c:	2c00      	cmp	r4, #0
     15e:	d004      	beq.n	16a <delay_cycles_ms+0x1e>
		SysTick->LOAD = n;
     160:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     162:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     164:	6813      	ldr	r3, [r2, #0]
     166:	420b      	tst	r3, r1
     168:	d0fc      	beq.n	164 <delay_cycles_ms+0x18>
     16a:	3801      	subs	r0, #1
     16c:	d2f6      	bcs.n	15c <delay_cycles_ms+0x10>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
     16e:	bd30      	pop	{r4, r5, pc}
     170:	20000004 	.word	0x20000004
     174:	e000e010 	.word	0xe000e010

00000178 <configure_debug_serial>:
static struct usart_config config_master_usart;



void configure_debug_serial(void)
{
     178:	b570      	push	{r4, r5, r6, lr}
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     17a:	4b21      	ldr	r3, [pc, #132]	; (200 <configure_debug_serial+0x88>)
     17c:	2280      	movs	r2, #128	; 0x80
     17e:	05d2      	lsls	r2, r2, #23
     180:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     182:	2200      	movs	r2, #0
     184:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
     186:	21ff      	movs	r1, #255	; 0xff
     188:	8119      	strh	r1, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
     18a:	2100      	movs	r1, #0
     18c:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     18e:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
     190:	2096      	movs	r0, #150	; 0x96
     192:	0180      	lsls	r0, r0, #6
     194:	6218      	str	r0, [r3, #32]
	config->receiver_enable  = true;
     196:	2001      	movs	r0, #1
     198:	2424      	movs	r4, #36	; 0x24
     19a:	5518      	strb	r0, [r3, r4]
	config->transmitter_enable = true;
     19c:	2425      	movs	r4, #37	; 0x25
     19e:	5518      	strb	r0, [r3, r4]
	config->clock_polarity_inverted = false;
     1a0:	2026      	movs	r0, #38	; 0x26
     1a2:	541a      	strb	r2, [r3, r0]
	config->use_external_clock = false;
     1a4:	2027      	movs	r0, #39	; 0x27
     1a6:	541a      	strb	r2, [r3, r0]
	config->ext_clock_freq   = 0;
     1a8:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     1aa:	202c      	movs	r0, #44	; 0x2c
     1ac:	541a      	strb	r2, [r3, r0]
	config->generator_source = GCLK_GENERATOR_0;
     1ae:	202d      	movs	r0, #45	; 0x2d
     1b0:	541a      	strb	r2, [r3, r0]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     1b2:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     1b4:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     1b6:	76da      	strb	r2, [r3, #27]
#endif
#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification      = false;
     1b8:	7619      	strb	r1, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable                = false;
     1ba:	7719      	strb	r1, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                      = false;
     1bc:	7659      	strb	r1, [r3, #25]
	config->receive_pulse_length                        = 19;
     1be:	2213      	movs	r2, #19
     1c0:	769a      	strb	r2, [r3, #26]
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable                  = false;
     1c2:	7759      	strb	r1, [r3, #29]
	usart_get_config_defaults(&config_master_usart);
	config_master_usart.baudrate    = 9600;
	config_master_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
     1c4:	2280      	movs	r2, #128	; 0x80
     1c6:	0352      	lsls	r2, r2, #13
     1c8:	60da      	str	r2, [r3, #12]
	config_master_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
     1ca:	4a0e      	ldr	r2, [pc, #56]	; (204 <configure_debug_serial+0x8c>)
     1cc:	631a      	str	r2, [r3, #48]	; 0x30
	config_master_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
     1ce:	4a0e      	ldr	r2, [pc, #56]	; (208 <configure_debug_serial+0x90>)
     1d0:	635a      	str	r2, [r3, #52]	; 0x34
	config_master_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
     1d2:	2201      	movs	r2, #1
     1d4:	4252      	negs	r2, r2
     1d6:	639a      	str	r2, [r3, #56]	; 0x38
	config_master_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
     1d8:	63da      	str	r2, [r3, #60]	; 0x3c
	
	while (usart_init(&usart_master_instance,
     1da:	4e0c      	ldr	r6, [pc, #48]	; (20c <configure_debug_serial+0x94>)
     1dc:	1c1d      	adds	r5, r3, #0
     1de:	4c0c      	ldr	r4, [pc, #48]	; (210 <configure_debug_serial+0x98>)
     1e0:	1c30      	adds	r0, r6, #0
     1e2:	490c      	ldr	r1, [pc, #48]	; (214 <configure_debug_serial+0x9c>)
     1e4:	1c2a      	adds	r2, r5, #0
     1e6:	47a0      	blx	r4
     1e8:	2800      	cmp	r0, #0
     1ea:	d1f9      	bne.n	1e0 <configure_debug_serial+0x68>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     1ec:	4b07      	ldr	r3, [pc, #28]	; (20c <configure_debug_serial+0x94>)
     1ee:	681a      	ldr	r2, [r3, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     1f0:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     1f2:	2b00      	cmp	r3, #0
     1f4:	d1fc      	bne.n	1f0 <configure_debug_serial+0x78>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     1f6:	6811      	ldr	r1, [r2, #0]
     1f8:	2302      	movs	r3, #2
     1fa:	430b      	orrs	r3, r1
     1fc:	6013      	str	r3, [r2, #0]
		EDBG_CDC_MODULE, &config_master_usart) != STATUS_OK) {
	}
	
	usart_enable(&usart_master_instance);
}
     1fe:	bd70      	pop	{r4, r5, r6, pc}
     200:	20000028 	.word	0x20000028
     204:	00160002 	.word	0x00160002
     208:	00170002 	.word	0x00170002
     20c:	2000008c 	.word	0x2000008c
     210:	00000a9d 	.word	0x00000a9d
     214:	42001400 	.word	0x42001400

00000218 <print>:

enum status_code print(const char *str){
     218:	b538      	push	{r3, r4, r5, lr}
     21a:	1c01      	adds	r1, r0, #0
	uint16_t strsize = 0;
	for (uint16_t i = 0; i<0xFFFF; i++)
	{
		if (str[i] == '\0')
     21c:	7803      	ldrb	r3, [r0, #0]
     21e:	2b00      	cmp	r3, #0
     220:	d006      	beq.n	230 <print+0x18>
     222:	1c43      	adds	r3, r0, #1
	usart_enable(&usart_master_instance);
}

enum status_code print(const char *str){
	uint16_t strsize = 0;
	for (uint16_t i = 0; i<0xFFFF; i++)
     224:	2201      	movs	r2, #1
     226:	4d09      	ldr	r5, [pc, #36]	; (24c <print+0x34>)
	{
		if (str[i] == '\0')
     228:	781c      	ldrb	r4, [r3, #0]
     22a:	2c00      	cmp	r4, #0
     22c:	d104      	bne.n	238 <print+0x20>
     22e:	e000      	b.n	232 <print+0x1a>
	usart_enable(&usart_master_instance);
}

enum status_code print(const char *str){
	uint16_t strsize = 0;
	for (uint16_t i = 0; i<0xFFFF; i++)
     230:	2200      	movs	r2, #0
	{
		if (str[i] == '\0')
		{
			strsize = i+1;
     232:	3201      	adds	r2, #1
     234:	b292      	uxth	r2, r2
			break;
     236:	e005      	b.n	244 <print+0x2c>
	usart_enable(&usart_master_instance);
}

enum status_code print(const char *str){
	uint16_t strsize = 0;
	for (uint16_t i = 0; i<0xFFFF; i++)
     238:	3201      	adds	r2, #1
     23a:	b292      	uxth	r2, r2
     23c:	3301      	adds	r3, #1
     23e:	42aa      	cmp	r2, r5
     240:	d1f2      	bne.n	228 <print+0x10>
	
	usart_enable(&usart_master_instance);
}

enum status_code print(const char *str){
	uint16_t strsize = 0;
     242:	2200      	movs	r2, #0
		{
			strsize = i+1;
			break;
		}
	}
	return usart_write_buffer_wait(&usart_master_instance, str, strsize);
     244:	4802      	ldr	r0, [pc, #8]	; (250 <print+0x38>)
     246:	4b03      	ldr	r3, [pc, #12]	; (254 <print+0x3c>)
     248:	4798      	blx	r3
}
     24a:	bd38      	pop	{r3, r4, r5, pc}
     24c:	0000ffff 	.word	0x0000ffff
     250:	2000008c 	.word	0x2000008c
     254:	00000d85 	.word	0x00000d85

00000258 <println>:


enum status_code println(const char *str){
     258:	b530      	push	{r4, r5, lr}
     25a:	b083      	sub	sp, #12
     25c:	1c01      	adds	r1, r0, #0
	const char ln[]="\r\n";
     25e:	ab01      	add	r3, sp, #4
     260:	4a11      	ldr	r2, [pc, #68]	; (2a8 <println+0x50>)
     262:	8810      	ldrh	r0, [r2, #0]
     264:	8018      	strh	r0, [r3, #0]
     266:	7892      	ldrb	r2, [r2, #2]
     268:	709a      	strb	r2, [r3, #2]
	uint16_t strsize = 0;
	for (uint16_t i = 0; i<0xFFFF; i++)
	{
		if (str[i] == '\0')
     26a:	780b      	ldrb	r3, [r1, #0]
     26c:	2b00      	cmp	r3, #0
     26e:	d006      	beq.n	27e <println+0x26>
     270:	1c4b      	adds	r3, r1, #1


enum status_code println(const char *str){
	const char ln[]="\r\n";
	uint16_t strsize = 0;
	for (uint16_t i = 0; i<0xFFFF; i++)
     272:	2201      	movs	r2, #1
     274:	4d0d      	ldr	r5, [pc, #52]	; (2ac <println+0x54>)
	{
		if (str[i] == '\0')
     276:	781c      	ldrb	r4, [r3, #0]
     278:	2c00      	cmp	r4, #0
     27a:	d104      	bne.n	286 <println+0x2e>
     27c:	e000      	b.n	280 <println+0x28>


enum status_code println(const char *str){
	const char ln[]="\r\n";
	uint16_t strsize = 0;
	for (uint16_t i = 0; i<0xFFFF; i++)
     27e:	2200      	movs	r2, #0
	{
		if (str[i] == '\0')
		{
			strsize = i+1;
     280:	3201      	adds	r2, #1
     282:	b292      	uxth	r2, r2
			break;
     284:	e005      	b.n	292 <println+0x3a>


enum status_code println(const char *str){
	const char ln[]="\r\n";
	uint16_t strsize = 0;
	for (uint16_t i = 0; i<0xFFFF; i++)
     286:	3201      	adds	r2, #1
     288:	b292      	uxth	r2, r2
     28a:	3301      	adds	r3, #1
     28c:	42aa      	cmp	r2, r5
     28e:	d1f2      	bne.n	276 <println+0x1e>
}


enum status_code println(const char *str){
	const char ln[]="\r\n";
	uint16_t strsize = 0;
     290:	2200      	movs	r2, #0
		{
			strsize = i+1;
			break;
		}
	}
	usart_write_buffer_wait(&usart_master_instance, str, strsize);
     292:	4d07      	ldr	r5, [pc, #28]	; (2b0 <println+0x58>)
     294:	1c28      	adds	r0, r5, #0
     296:	4c07      	ldr	r4, [pc, #28]	; (2b4 <println+0x5c>)
     298:	47a0      	blx	r4
	return usart_write_buffer_wait(&usart_master_instance, ln, sizeof(ln));
     29a:	1c28      	adds	r0, r5, #0
     29c:	a901      	add	r1, sp, #4
     29e:	2203      	movs	r2, #3
     2a0:	47a0      	blx	r4
	
}
     2a2:	b003      	add	sp, #12
     2a4:	bd30      	pop	{r4, r5, pc}
     2a6:	46c0      	nop			; (mov r8, r8)
     2a8:	00001a54 	.word	0x00001a54
     2ac:	0000ffff 	.word	0x0000ffff
     2b0:	2000008c 	.word	0x2000008c
     2b4:	00000d85 	.word	0x00000d85

000002b8 <printnum>:


enum status_code printnum(int num){
     2b8:	b500      	push	{lr}
     2ba:	b085      	sub	sp, #20
	char num_output[12];
	itoa(num, &num_output, 10);
     2bc:	a901      	add	r1, sp, #4
     2be:	220a      	movs	r2, #10
     2c0:	4b04      	ldr	r3, [pc, #16]	; (2d4 <printnum+0x1c>)
     2c2:	4798      	blx	r3
	return usart_write_buffer_wait(&usart_master_instance, num_output, sizeof(num_output));
     2c4:	4804      	ldr	r0, [pc, #16]	; (2d8 <printnum+0x20>)
     2c6:	a901      	add	r1, sp, #4
     2c8:	220c      	movs	r2, #12
     2ca:	4b04      	ldr	r3, [pc, #16]	; (2dc <printnum+0x24>)
     2cc:	4798      	blx	r3
}
     2ce:	b005      	add	sp, #20
     2d0:	bd00      	pop	{pc}
     2d2:	46c0      	nop			; (mov r8, r8)
     2d4:	000005d9 	.word	0x000005d9
     2d8:	2000008c 	.word	0x2000008c
     2dc:	00000d85 	.word	0x00000d85

000002e0 <printlnnum>:

enum status_code printlnnum(int num){
     2e0:	b530      	push	{r4, r5, lr}
     2e2:	b085      	sub	sp, #20
	char num_output[12];
	itoa(num, &num_output, 10);
     2e4:	a901      	add	r1, sp, #4
     2e6:	220a      	movs	r2, #10
     2e8:	4b09      	ldr	r3, [pc, #36]	; (310 <printlnnum+0x30>)
     2ea:	4798      	blx	r3
	usart_write_buffer_wait(&usart_master_instance, num_output, sizeof(num_output));
     2ec:	4d09      	ldr	r5, [pc, #36]	; (314 <printlnnum+0x34>)
     2ee:	1c28      	adds	r0, r5, #0
     2f0:	a901      	add	r1, sp, #4
     2f2:	220c      	movs	r2, #12
     2f4:	4c08      	ldr	r4, [pc, #32]	; (318 <printlnnum+0x38>)
     2f6:	47a0      	blx	r4
	char ln[]="\r\n";
     2f8:	4b08      	ldr	r3, [pc, #32]	; (31c <printlnnum+0x3c>)
     2fa:	881a      	ldrh	r2, [r3, #0]
     2fc:	4669      	mov	r1, sp
     2fe:	800a      	strh	r2, [r1, #0]
     300:	789b      	ldrb	r3, [r3, #2]
     302:	708b      	strb	r3, [r1, #2]
	return usart_write_buffer_wait(&usart_master_instance, ln, sizeof(ln));
     304:	1c28      	adds	r0, r5, #0
     306:	2203      	movs	r2, #3
     308:	47a0      	blx	r4
}
     30a:	b005      	add	sp, #20
     30c:	bd30      	pop	{r4, r5, pc}
     30e:	46c0      	nop			; (mov r8, r8)
     310:	000005d9 	.word	0x000005d9
     314:	2000008c 	.word	0x2000008c
     318:	00000d85 	.word	0x00000d85
     31c:	00001a54 	.word	0x00001a54

00000320 <printlnflt>:
		}
	}
	return usart_write_buffer_wait(&usart_master_instance, num_output, sizeof(num_output));
}

enum status_code printlnflt(float numflt){
     320:	b530      	push	{r4, r5, lr}
     322:	b087      	sub	sp, #28
	//default assume 2 decimal places
	long num = (long)(numflt*100);
     324:	4925      	ldr	r1, [pc, #148]	; (3bc <printlnflt+0x9c>)
     326:	4b26      	ldr	r3, [pc, #152]	; (3c0 <printlnflt+0xa0>)
     328:	4798      	blx	r3
     32a:	4b26      	ldr	r3, [pc, #152]	; (3c4 <printlnflt+0xa4>)
     32c:	4798      	blx	r3
     32e:	1c05      	adds	r5, r0, #0
	char num_output[15] = {'\0'};
     330:	ac02      	add	r4, sp, #8
     332:	2300      	movs	r3, #0
     334:	9302      	str	r3, [sp, #8]
     336:	9303      	str	r3, [sp, #12]
     338:	9304      	str	r3, [sp, #16]
     33a:	81a3      	strh	r3, [r4, #12]
     33c:	73a3      	strb	r3, [r4, #14]
	itoa(num, &num_output, 10);
     33e:	1c21      	adds	r1, r4, #0
     340:	220a      	movs	r2, #10
     342:	4b21      	ldr	r3, [pc, #132]	; (3c8 <printlnflt+0xa8>)
     344:	4798      	blx	r3
	for (uint8_t i = 2; i<(15-1); i++)
	{
		if (num_output[i] == '\0')
     346:	78a3      	ldrb	r3, [r4, #2]
     348:	2b00      	cmp	r3, #0
     34a:	d006      	beq.n	35a <printlnflt+0x3a>
     34c:	2303      	movs	r3, #3
     34e:	1c19      	adds	r1, r3, #0
     350:	aa02      	add	r2, sp, #8
     352:	5c9a      	ldrb	r2, [r3, r2]
     354:	2a00      	cmp	r2, #0
     356:	d11d      	bne.n	394 <printlnflt+0x74>
     358:	e000      	b.n	35c <printlnflt+0x3c>
     35a:	2102      	movs	r1, #2
		{
			num_output[i+1] =	'\0';
     35c:	aa02      	add	r2, sp, #8
     35e:	1853      	adds	r3, r2, r1
     360:	2200      	movs	r2, #0
     362:	705a      	strb	r2, [r3, #1]
			if(num<=9){
     364:	2d09      	cmp	r5, #9
     366:	dc07      	bgt.n	378 <printlnflt+0x58>
				num_output[i]	=	num_output[i-2]; //not really sure why this works
     368:	aa02      	add	r2, sp, #8
     36a:	1e98      	subs	r0, r3, #2
     36c:	7800      	ldrb	r0, [r0, #0]
     36e:	5450      	strb	r0, [r2, r1]
				num_output[i-1] =	'0';
     370:	3b01      	subs	r3, #1
     372:	2230      	movs	r2, #48	; 0x30
     374:	701a      	strb	r2, [r3, #0]
     376:	e007      	b.n	388 <printlnflt+0x68>
			}
			else{
				num_output[i]	=	num_output[i-1];
     378:	1e4a      	subs	r2, r1, #1
     37a:	ab02      	add	r3, sp, #8
     37c:	5c98      	ldrb	r0, [r3, r2]
     37e:	5458      	strb	r0, [r3, r1]
				num_output[i-1] =	num_output[i-2];
     380:	1858      	adds	r0, r3, r1
     382:	3802      	subs	r0, #2
     384:	7800      	ldrb	r0, [r0, #0]
     386:	5498      	strb	r0, [r3, r2]
			}
			num_output[i-2] =	'.';
     388:	ab06      	add	r3, sp, #24
     38a:	1859      	adds	r1, r3, r1
     38c:	3912      	subs	r1, #18
     38e:	232e      	movs	r3, #46	; 0x2e
     390:	700b      	strb	r3, [r1, #0]
			break;
     392:	e002      	b.n	39a <printlnflt+0x7a>
     394:	3301      	adds	r3, #1
enum status_code printlnflt(float numflt){
	//default assume 2 decimal places
	long num = (long)(numflt*100);
	char num_output[15] = {'\0'};
	itoa(num, &num_output, 10);
	for (uint8_t i = 2; i<(15-1); i++)
     396:	2b0e      	cmp	r3, #14
     398:	d1d9      	bne.n	34e <printlnflt+0x2e>
			}
			num_output[i-2] =	'.';
			break;
		}
	}
	usart_write_buffer_wait(&usart_master_instance, num_output, sizeof(num_output));
     39a:	4d0c      	ldr	r5, [pc, #48]	; (3cc <printlnflt+0xac>)
     39c:	1c28      	adds	r0, r5, #0
     39e:	a902      	add	r1, sp, #8
     3a0:	220f      	movs	r2, #15
     3a2:	4c0b      	ldr	r4, [pc, #44]	; (3d0 <printlnflt+0xb0>)
     3a4:	47a0      	blx	r4
	char ln[]="\r\n";
     3a6:	a901      	add	r1, sp, #4
     3a8:	4b0a      	ldr	r3, [pc, #40]	; (3d4 <printlnflt+0xb4>)
     3aa:	881a      	ldrh	r2, [r3, #0]
     3ac:	800a      	strh	r2, [r1, #0]
     3ae:	789b      	ldrb	r3, [r3, #2]
     3b0:	708b      	strb	r3, [r1, #2]
	return usart_write_buffer_wait(&usart_master_instance, ln, sizeof(ln));
     3b2:	1c28      	adds	r0, r5, #0
     3b4:	2203      	movs	r2, #3
     3b6:	47a0      	blx	r4
}
     3b8:	b007      	add	sp, #28
     3ba:	bd30      	pop	{r4, r5, pc}
     3bc:	42c80000 	.word	0x42c80000
     3c0:	00001739 	.word	0x00001739
     3c4:	0000198d 	.word	0x0000198d
     3c8:	000005d9 	.word	0x000005d9
     3cc:	2000008c 	.word	0x2000008c
     3d0:	00000d85 	.word	0x00000d85
     3d4:	00001a54 	.word	0x00001a54

000003d8 <writechar>:
	usart_write_buffer_wait(&usart_master_instance, obin, sizeof(obin));
	return println(&bin_str);
}


enum status_code writechar(char outbyte){
     3d8:	b500      	push	{lr}
     3da:	b083      	sub	sp, #12
	char outstring[] = {outbyte, '\0'};
     3dc:	a901      	add	r1, sp, #4
     3de:	7008      	strb	r0, [r1, #0]
     3e0:	2300      	movs	r3, #0
     3e2:	704b      	strb	r3, [r1, #1]
	return usart_write_buffer_wait(&usart_master_instance, outstring, sizeof(outstring));
     3e4:	4802      	ldr	r0, [pc, #8]	; (3f0 <writechar+0x18>)
     3e6:	2202      	movs	r2, #2
     3e8:	4b02      	ldr	r3, [pc, #8]	; (3f4 <writechar+0x1c>)
     3ea:	4798      	blx	r3
}
     3ec:	b003      	add	sp, #12
     3ee:	bd00      	pop	{pc}
     3f0:	2000008c 	.word	0x2000008c
     3f4:	00000d85 	.word	0x00000d85

000003f8 <revstr>:

void revstr(uint8_t *str, uint16_t length){
     3f8:	b510      	push	{r4, lr}
	length--;
     3fa:	1e4a      	subs	r2, r1, #1
     3fc:	b292      	uxth	r2, r2
	uint8_t temp;
	
	if(length==1){
     3fe:	2a01      	cmp	r2, #1
     400:	d002      	beq.n	408 <revstr+0x10>
		temp = str[0];
		str[0] = str[1];
		str[1] = temp;
		return;
	}
	for(uint16_t x = 0; x < (length/2); x++){
     402:	0851      	lsrs	r1, r2, #1
     404:	d105      	bne.n	412 <revstr+0x1a>
     406:	e012      	b.n	42e <revstr+0x36>
void revstr(uint8_t *str, uint16_t length){
	length--;
	uint8_t temp;
	
	if(length==1){
		temp = str[0];
     408:	7803      	ldrb	r3, [r0, #0]
		str[0] = str[1];
     40a:	7842      	ldrb	r2, [r0, #1]
     40c:	7002      	strb	r2, [r0, #0]
		str[1] = temp;
     40e:	7043      	strb	r3, [r0, #1]
		return;
     410:	e00d      	b.n	42e <revstr+0x36>
     412:	1c03      	adds	r3, r0, #0
     414:	1882      	adds	r2, r0, r2
     416:	3001      	adds	r0, #1
     418:	3901      	subs	r1, #1
     41a:	b289      	uxth	r1, r1
     41c:	1840      	adds	r0, r0, r1
	}
	for(uint16_t x = 0; x < (length/2); x++){
		temp = str[x];
     41e:	7819      	ldrb	r1, [r3, #0]
		str[x]=str[length-x];
     420:	7814      	ldrb	r4, [r2, #0]
     422:	701c      	strb	r4, [r3, #0]
		str[length-x]=temp;
     424:	7011      	strb	r1, [r2, #0]
     426:	3301      	adds	r3, #1
     428:	3a01      	subs	r2, #1
		temp = str[0];
		str[0] = str[1];
		str[1] = temp;
		return;
	}
	for(uint16_t x = 0; x < (length/2); x++){
     42a:	4283      	cmp	r3, r0
     42c:	d1f7      	bne.n	41e <revstr+0x26>
		temp = str[x];
		str[x]=str[length-x];
		str[length-x]=temp;
	}
	return;
     42e:	bd10      	pop	{r4, pc}

00000430 <_printlnbin8>:
	char obin[]="b";
	usart_write_buffer_wait(&usart_master_instance, obin, sizeof(obin));
	return print(&bin_str);
}

enum status_code _printlnbin8(uint8_t num){
     430:	b570      	push	{r4, r5, r6, lr}
     432:	b084      	sub	sp, #16
	char bin_str[9];
	bin_str[0] = '\0'; // we will reverse this string
     434:	2200      	movs	r2, #0
     436:	ab01      	add	r3, sp, #4
     438:	701a      	strb	r2, [r3, #0]
     43a:	466a      	mov	r2, sp
     43c:	3205      	adds	r2, #5
     43e:	2300      	movs	r3, #0
	for (uint8_t i = 0; i<9; i++)
	{
		if ((num >> i) & 1)
     440:	2401      	movs	r4, #1
		{
			bin_str[i+1] = '1';
		}
		else{
			bin_str[i+1] = '0';
     442:	2630      	movs	r6, #48	; 0x30
	bin_str[0] = '\0'; // we will reverse this string
	for (uint8_t i = 0; i<9; i++)
	{
		if ((num >> i) & 1)
		{
			bin_str[i+1] = '1';
     444:	2531      	movs	r5, #49	; 0x31
enum status_code _printlnbin8(uint8_t num){
	char bin_str[9];
	bin_str[0] = '\0'; // we will reverse this string
	for (uint8_t i = 0; i<9; i++)
	{
		if ((num >> i) & 1)
     446:	1c01      	adds	r1, r0, #0
     448:	4119      	asrs	r1, r3
     44a:	420c      	tst	r4, r1
     44c:	d001      	beq.n	452 <_printlnbin8+0x22>
		{
			bin_str[i+1] = '1';
     44e:	7015      	strb	r5, [r2, #0]
     450:	e000      	b.n	454 <_printlnbin8+0x24>
		}
		else{
			bin_str[i+1] = '0';
     452:	7016      	strb	r6, [r2, #0]
     454:	3301      	adds	r3, #1
     456:	3201      	adds	r2, #1
}

enum status_code _printlnbin8(uint8_t num){
	char bin_str[9];
	bin_str[0] = '\0'; // we will reverse this string
	for (uint8_t i = 0; i<9; i++)
     458:	2b09      	cmp	r3, #9
     45a:	d1f4      	bne.n	446 <_printlnbin8+0x16>
		}
		else{
			bin_str[i+1] = '0';
		}
	}
	revstr(&bin_str, 9);
     45c:	a801      	add	r0, sp, #4
     45e:	2109      	movs	r1, #9
     460:	4b07      	ldr	r3, [pc, #28]	; (480 <_printlnbin8+0x50>)
     462:	4798      	blx	r3
	char obin[]="b";
     464:	2362      	movs	r3, #98	; 0x62
     466:	466a      	mov	r2, sp
     468:	8013      	strh	r3, [r2, #0]
	usart_write_buffer_wait(&usart_master_instance, obin, sizeof(obin));
     46a:	4806      	ldr	r0, [pc, #24]	; (484 <_printlnbin8+0x54>)
     46c:	4669      	mov	r1, sp
     46e:	2202      	movs	r2, #2
     470:	4b05      	ldr	r3, [pc, #20]	; (488 <_printlnbin8+0x58>)
     472:	4798      	blx	r3
	return println(&bin_str);
     474:	a801      	add	r0, sp, #4
     476:	4b05      	ldr	r3, [pc, #20]	; (48c <_printlnbin8+0x5c>)
     478:	4798      	blx	r3
}
     47a:	b004      	add	sp, #16
     47c:	bd70      	pop	{r4, r5, r6, pc}
     47e:	46c0      	nop			; (mov r8, r8)
     480:	000003f9 	.word	0x000003f9
     484:	2000008c 	.word	0x2000008c
     488:	00000d85 	.word	0x00000d85
     48c:	00000259 	.word	0x00000259

00000490 <printlnbin>:
	char obin[]="b";
	usart_write_buffer_wait(&usart_master_instance, obin, sizeof(obin));
	return print(&bin_str);
}

enum status_code printlnbin(uint16_t num){
     490:	b570      	push	{r4, r5, r6, lr}
     492:	b086      	sub	sp, #24
	if(num < 256){
     494:	28ff      	cmp	r0, #255	; 0xff
     496:	d803      	bhi.n	4a0 <printlnbin+0x10>
		return _printlnbin8(num);
     498:	b2c0      	uxtb	r0, r0
     49a:	4b14      	ldr	r3, [pc, #80]	; (4ec <printlnbin+0x5c>)
     49c:	4798      	blx	r3
     49e:	e022      	b.n	4e6 <printlnbin+0x56>
	}
	
	char bin_str[17];
	bin_str[0] = '\0'; // we will reverse this string
     4a0:	2200      	movs	r2, #0
     4a2:	ab01      	add	r3, sp, #4
     4a4:	701a      	strb	r2, [r3, #0]
     4a6:	466a      	mov	r2, sp
     4a8:	3205      	adds	r2, #5
     4aa:	2300      	movs	r3, #0
	for (uint8_t i = 0; i<16; i++)
	{
		if ((num >> i) & 1)
     4ac:	2401      	movs	r4, #1
		{
			bin_str[i+1] = '1';
		}
		else{
			bin_str[i+1] = '0';
     4ae:	2630      	movs	r6, #48	; 0x30
	bin_str[0] = '\0'; // we will reverse this string
	for (uint8_t i = 0; i<16; i++)
	{
		if ((num >> i) & 1)
		{
			bin_str[i+1] = '1';
     4b0:	2531      	movs	r5, #49	; 0x31
	
	char bin_str[17];
	bin_str[0] = '\0'; // we will reverse this string
	for (uint8_t i = 0; i<16; i++)
	{
		if ((num >> i) & 1)
     4b2:	1c01      	adds	r1, r0, #0
     4b4:	4119      	asrs	r1, r3
     4b6:	420c      	tst	r4, r1
     4b8:	d001      	beq.n	4be <printlnbin+0x2e>
		{
			bin_str[i+1] = '1';
     4ba:	7015      	strb	r5, [r2, #0]
     4bc:	e000      	b.n	4c0 <printlnbin+0x30>
		}
		else{
			bin_str[i+1] = '0';
     4be:	7016      	strb	r6, [r2, #0]
     4c0:	3301      	adds	r3, #1
     4c2:	3201      	adds	r2, #1
		return _printlnbin8(num);
	}
	
	char bin_str[17];
	bin_str[0] = '\0'; // we will reverse this string
	for (uint8_t i = 0; i<16; i++)
     4c4:	2b10      	cmp	r3, #16
     4c6:	d1f4      	bne.n	4b2 <printlnbin+0x22>
		}
		else{
			bin_str[i+1] = '0';
		}
	}
	revstr(&bin_str, 17);
     4c8:	a801      	add	r0, sp, #4
     4ca:	2111      	movs	r1, #17
     4cc:	4b08      	ldr	r3, [pc, #32]	; (4f0 <printlnbin+0x60>)
     4ce:	4798      	blx	r3
	char obin[]="b";
     4d0:	2362      	movs	r3, #98	; 0x62
     4d2:	466a      	mov	r2, sp
     4d4:	8013      	strh	r3, [r2, #0]
	usart_write_buffer_wait(&usart_master_instance, obin, sizeof(obin));
     4d6:	4807      	ldr	r0, [pc, #28]	; (4f4 <printlnbin+0x64>)
     4d8:	4669      	mov	r1, sp
     4da:	2202      	movs	r2, #2
     4dc:	4b06      	ldr	r3, [pc, #24]	; (4f8 <printlnbin+0x68>)
     4de:	4798      	blx	r3
	return println(&bin_str);
     4e0:	a801      	add	r0, sp, #4
     4e2:	4b06      	ldr	r3, [pc, #24]	; (4fc <printlnbin+0x6c>)
     4e4:	4798      	blx	r3
}
     4e6:	b006      	add	sp, #24
     4e8:	bd70      	pop	{r4, r5, r6, pc}
     4ea:	46c0      	nop			; (mov r8, r8)
     4ec:	00000431 	.word	0x00000431
     4f0:	000003f9 	.word	0x000003f9
     4f4:	2000008c 	.word	0x2000008c
     4f8:	00000d85 	.word	0x00000d85
     4fc:	00000259 	.word	0x00000259

00000500 <ltoa>:
{
  return ltoa( value, string, radix ) ;
}

extern char* ltoa( long value, char *string, int radix )
{
     500:	b5f0      	push	{r4, r5, r6, r7, lr}
     502:	465f      	mov	r7, fp
     504:	4656      	mov	r6, sl
     506:	464d      	mov	r5, r9
     508:	4644      	mov	r4, r8
     50a:	b4f0      	push	{r4, r5, r6, r7}
     50c:	b087      	sub	sp, #28
     50e:	468b      	mov	fp, r1
  long i;
  unsigned long v;
  int sign;
  char *sp;

  if ( string == NULL )
     510:	2900      	cmp	r1, #0
     512:	d042      	beq.n	59a <ltoa+0x9a>
  {
    return 0 ;
  }

  if (radix > 36 || radix <= 1)
     514:	1c17      	adds	r7, r2, #0
     516:	1e93      	subs	r3, r2, #2
     518:	2b22      	cmp	r3, #34	; 0x22
     51a:	d840      	bhi.n	59e <ltoa+0x9e>
  {
    return 0 ;
  }

  sign = (radix == 10 && value < 0);
     51c:	2a0a      	cmp	r2, #10
     51e:	d144      	bne.n	5aa <ltoa+0xaa>
     520:	2800      	cmp	r0, #0
     522:	da42      	bge.n	5aa <ltoa+0xaa>
     524:	e03d      	b.n	5a2 <ltoa+0xa2>
  while (v || tp == tmp)
  {
    i = v % radix;
    v = v / radix;
    if (i < 10)
      *tp++ = i+'0';
     526:	ac03      	add	r4, sp, #12
  else
  {
    v = (unsigned long)value;
  }

  while (v || tp == tmp)
     528:	46a2      	mov	sl, r4
  {
    i = v % radix;
     52a:	4b29      	ldr	r3, [pc, #164]	; (5d0 <ltoa+0xd0>)
     52c:	4699      	mov	r9, r3
    v = v / radix;
     52e:	4a29      	ldr	r2, [pc, #164]	; (5d4 <ltoa+0xd4>)
     530:	4690      	mov	r8, r2
     532:	e010      	b.n	556 <ltoa+0x56>
    v = (unsigned long)value;
  }

  while (v || tp == tmp)
  {
    i = v % radix;
     534:	1c28      	adds	r0, r5, #0
     536:	1c39      	adds	r1, r7, #0
     538:	47c8      	blx	r9
     53a:	1c0e      	adds	r6, r1, #0
    v = v / radix;
     53c:	1c28      	adds	r0, r5, #0
     53e:	1c39      	adds	r1, r7, #0
     540:	47c0      	blx	r8
     542:	1c05      	adds	r5, r0, #0
    if (i < 10)
     544:	2e09      	cmp	r6, #9
     546:	dc03      	bgt.n	550 <ltoa+0x50>
      *tp++ = i+'0';
     548:	3630      	adds	r6, #48	; 0x30
     54a:	7026      	strb	r6, [r4, #0]
     54c:	3401      	adds	r4, #1
     54e:	e002      	b.n	556 <ltoa+0x56>
    else
      *tp++ = i + 'a' - 10;
     550:	3657      	adds	r6, #87	; 0x57
     552:	7026      	strb	r6, [r4, #0]
     554:	3401      	adds	r4, #1
  else
  {
    v = (unsigned long)value;
  }

  while (v || tp == tmp)
     556:	2d00      	cmp	r5, #0
     558:	d1ec      	bne.n	534 <ltoa+0x34>
     55a:	4554      	cmp	r4, sl
     55c:	d029      	beq.n	5b2 <ltoa+0xb2>
      *tp++ = i+'0';
    else
      *tp++ = i + 'a' - 10;
  }

  sp = string;
     55e:	465d      	mov	r5, fp

  if (sign)
     560:	9b01      	ldr	r3, [sp, #4]
     562:	2b00      	cmp	r3, #0
     564:	d003      	beq.n	56e <ltoa+0x6e>
    *sp++ = '-';
     566:	3501      	adds	r5, #1
     568:	232d      	movs	r3, #45	; 0x2d
     56a:	465a      	mov	r2, fp
     56c:	7013      	strb	r3, [r2, #0]
  while (tp > tmp)
     56e:	ab03      	add	r3, sp, #12
     570:	429c      	cmp	r4, r3
     572:	d90e      	bls.n	592 <ltoa+0x92>
     574:	3c01      	subs	r4, #1
     576:	1c2a      	adds	r2, r5, #0
     578:	4668      	mov	r0, sp
     57a:	300b      	adds	r0, #11
     57c:	1c23      	adds	r3, r4, #0
    *sp++ = *--tp;
     57e:	7819      	ldrb	r1, [r3, #0]
     580:	7011      	strb	r1, [r2, #0]
     582:	3b01      	subs	r3, #1
     584:	3201      	adds	r2, #1

  sp = string;

  if (sign)
    *sp++ = '-';
  while (tp > tmp)
     586:	4283      	cmp	r3, r0
     588:	d1f9      	bne.n	57e <ltoa+0x7e>
     58a:	ab03      	add	r3, sp, #12
     58c:	1ae4      	subs	r4, r4, r3
     58e:	3401      	adds	r4, #1
     590:	192d      	adds	r5, r5, r4
    *sp++ = *--tp;
  *sp = 0;
     592:	2300      	movs	r3, #0
     594:	702b      	strb	r3, [r5, #0]

  return string;
     596:	4658      	mov	r0, fp
     598:	e012      	b.n	5c0 <ltoa+0xc0>
  int sign;
  char *sp;

  if ( string == NULL )
  {
    return 0 ;
     59a:	2000      	movs	r0, #0
     59c:	e010      	b.n	5c0 <ltoa+0xc0>
  }

  if (radix > 36 || radix <= 1)
  {
    return 0 ;
     59e:	2000      	movs	r0, #0
     5a0:	e00e      	b.n	5c0 <ltoa+0xc0>
  }

  sign = (radix == 10 && value < 0);
  if (sign)
  {
    v = -value;
     5a2:	4245      	negs	r5, r0
  if (radix > 36 || radix <= 1)
  {
    return 0 ;
  }

  sign = (radix == 10 && value < 0);
     5a4:	2301      	movs	r3, #1
     5a6:	9301      	str	r3, [sp, #4]
     5a8:	e7bd      	b.n	526 <ltoa+0x26>
  {
    v = -value;
  }
  else
  {
    v = (unsigned long)value;
     5aa:	1c05      	adds	r5, r0, #0
     5ac:	2200      	movs	r2, #0
     5ae:	9201      	str	r2, [sp, #4]
     5b0:	e7b9      	b.n	526 <ltoa+0x26>
  }

  while (v || tp == tmp)
  {
    i = v % radix;
    v = v / radix;
     5b2:	2000      	movs	r0, #0
     5b4:	1c39      	adds	r1, r7, #0
     5b6:	4b07      	ldr	r3, [pc, #28]	; (5d4 <ltoa+0xd4>)
     5b8:	4798      	blx	r3
     5ba:	2500      	movs	r5, #0
    v = (unsigned long)value;
  }

  while (v || tp == tmp)
  {
    i = v % radix;
     5bc:	2600      	movs	r6, #0
     5be:	e7c3      	b.n	548 <ltoa+0x48>
  while (tp > tmp)
    *sp++ = *--tp;
  *sp = 0;

  return string;
}
     5c0:	b007      	add	sp, #28
     5c2:	bc3c      	pop	{r2, r3, r4, r5}
     5c4:	4690      	mov	r8, r2
     5c6:	4699      	mov	r9, r3
     5c8:	46a2      	mov	sl, r4
     5ca:	46ab      	mov	fp, r5
     5cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5ce:	46c0      	nop			; (mov r8, r8)
     5d0:	000016dd 	.word	0x000016dd
     5d4:	00001655 	.word	0x00001655

000005d8 <itoa>:
  reverse( s ) ;
}
#else

extern char* itoa( int value, char *string, int radix )
{
     5d8:	b508      	push	{r3, lr}
  return ltoa( value, string, radix ) ;
     5da:	4b01      	ldr	r3, [pc, #4]	; (5e0 <itoa+0x8>)
     5dc:	4798      	blx	r3
}
     5de:	bd08      	pop	{r3, pc}
     5e0:	00000501 	.word	0x00000501

000005e4 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     5e4:	4b0c      	ldr	r3, [pc, #48]	; (618 <cpu_irq_enter_critical+0x34>)
     5e6:	681b      	ldr	r3, [r3, #0]
     5e8:	2b00      	cmp	r3, #0
     5ea:	d110      	bne.n	60e <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     5ec:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     5f0:	2b00      	cmp	r3, #0
     5f2:	d109      	bne.n	608 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     5f4:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     5f6:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     5fa:	2200      	movs	r2, #0
     5fc:	4b07      	ldr	r3, [pc, #28]	; (61c <cpu_irq_enter_critical+0x38>)
     5fe:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     600:	2201      	movs	r2, #1
     602:	4b07      	ldr	r3, [pc, #28]	; (620 <cpu_irq_enter_critical+0x3c>)
     604:	701a      	strb	r2, [r3, #0]
     606:	e002      	b.n	60e <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     608:	2200      	movs	r2, #0
     60a:	4b05      	ldr	r3, [pc, #20]	; (620 <cpu_irq_enter_critical+0x3c>)
     60c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     60e:	4b02      	ldr	r3, [pc, #8]	; (618 <cpu_irq_enter_critical+0x34>)
     610:	681a      	ldr	r2, [r3, #0]
     612:	3201      	adds	r2, #1
     614:	601a      	str	r2, [r3, #0]
}
     616:	4770      	bx	lr
     618:	20000068 	.word	0x20000068
     61c:	20000008 	.word	0x20000008
     620:	2000006c 	.word	0x2000006c

00000624 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     624:	4b08      	ldr	r3, [pc, #32]	; (648 <cpu_irq_leave_critical+0x24>)
     626:	681a      	ldr	r2, [r3, #0]
     628:	3a01      	subs	r2, #1
     62a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     62c:	681b      	ldr	r3, [r3, #0]
     62e:	2b00      	cmp	r3, #0
     630:	d109      	bne.n	646 <cpu_irq_leave_critical+0x22>
     632:	4b06      	ldr	r3, [pc, #24]	; (64c <cpu_irq_leave_critical+0x28>)
     634:	781b      	ldrb	r3, [r3, #0]
     636:	2b00      	cmp	r3, #0
     638:	d005      	beq.n	646 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     63a:	2201      	movs	r2, #1
     63c:	4b04      	ldr	r3, [pc, #16]	; (650 <cpu_irq_leave_critical+0x2c>)
     63e:	701a      	strb	r2, [r3, #0]
     640:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     644:	b662      	cpsie	i
	}
}
     646:	4770      	bx	lr
     648:	20000068 	.word	0x20000068
     64c:	2000006c 	.word	0x2000006c
     650:	20000008 	.word	0x20000008

00000654 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     654:	b5f0      	push	{r4, r5, r6, r7, lr}
     656:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     658:	ac01      	add	r4, sp, #4
     65a:	2501      	movs	r5, #1
     65c:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     65e:	2700      	movs	r7, #0
     660:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     662:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     664:	203e      	movs	r0, #62	; 0x3e
     666:	1c21      	adds	r1, r4, #0
     668:	4e06      	ldr	r6, [pc, #24]	; (684 <system_board_init+0x30>)
     66a:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     66c:	2280      	movs	r2, #128	; 0x80
     66e:	05d2      	lsls	r2, r2, #23
     670:	4b05      	ldr	r3, [pc, #20]	; (688 <system_board_init+0x34>)
     672:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     674:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     676:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     678:	200f      	movs	r0, #15
     67a:	1c21      	adds	r1, r4, #0
     67c:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     67e:	b003      	add	sp, #12
     680:	bdf0      	pop	{r4, r5, r6, r7, pc}
     682:	46c0      	nop			; (mov r8, r8)
     684:	0000068d 	.word	0x0000068d
     688:	41004480 	.word	0x41004480

0000068c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     68c:	b500      	push	{lr}
     68e:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     690:	ab01      	add	r3, sp, #4
     692:	2280      	movs	r2, #128	; 0x80
     694:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     696:	780a      	ldrb	r2, [r1, #0]
     698:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     69a:	784a      	ldrb	r2, [r1, #1]
     69c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     69e:	788a      	ldrb	r2, [r1, #2]
     6a0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     6a2:	1c19      	adds	r1, r3, #0
     6a4:	4b01      	ldr	r3, [pc, #4]	; (6ac <port_pin_set_config+0x20>)
     6a6:	4798      	blx	r3
}
     6a8:	b003      	add	sp, #12
     6aa:	bd00      	pop	{pc}
     6ac:	00001355 	.word	0x00001355

000006b0 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     6b0:	b510      	push	{r4, lr}
     6b2:	1c03      	adds	r3, r0, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     6b4:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     6b6:	2040      	movs	r0, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     6b8:	4299      	cmp	r1, r3
     6ba:	d30c      	bcc.n	6d6 <_sercom_get_sync_baud_val+0x26>
     6bc:	2400      	movs	r4, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     6be:	1ac9      	subs	r1, r1, r3
		baud_calculated++;
     6c0:	1c60      	adds	r0, r4, #1
     6c2:	b280      	uxth	r0, r0
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     6c4:	428b      	cmp	r3, r1
     6c6:	d801      	bhi.n	6cc <_sercom_get_sync_baud_val+0x1c>
		clock_value = clock_value - baudrate;
		baud_calculated++;
     6c8:	1c04      	adds	r4, r0, #0
     6ca:	e7f8      	b.n	6be <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     6cc:	2040      	movs	r0, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     6ce:	2cff      	cmp	r4, #255	; 0xff
     6d0:	d801      	bhi.n	6d6 <_sercom_get_sync_baud_val+0x26>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     6d2:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     6d4:	2000      	movs	r0, #0
	}
}
     6d6:	bd10      	pop	{r4, pc}

000006d8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     6d8:	b5f0      	push	{r4, r5, r6, r7, lr}
     6da:	465f      	mov	r7, fp
     6dc:	4656      	mov	r6, sl
     6de:	464d      	mov	r5, r9
     6e0:	4644      	mov	r4, r8
     6e2:	b4f0      	push	{r4, r5, r6, r7}
     6e4:	b087      	sub	sp, #28
     6e6:	1c06      	adds	r6, r0, #0
     6e8:	1c0d      	adds	r5, r1, #0
     6ea:	9204      	str	r2, [sp, #16]
     6ec:	aa10      	add	r2, sp, #64	; 0x40
     6ee:	7810      	ldrb	r0, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     6f0:	1c32      	adds	r2, r6, #0
     6f2:	4342      	muls	r2, r0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     6f4:	2440      	movs	r4, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     6f6:	428a      	cmp	r2, r1
     6f8:	d900      	bls.n	6fc <_sercom_get_async_baud_val+0x24>
     6fa:	e0b3      	b.n	864 <_sercom_get_async_baud_val+0x18c>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     6fc:	2b00      	cmp	r3, #0
     6fe:	d14b      	bne.n	798 <_sercom_get_async_baud_val+0xc0>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     700:	2100      	movs	r1, #0
     702:	1c32      	adds	r2, r6, #0
     704:	4c5e      	ldr	r4, [pc, #376]	; (880 <_sercom_get_async_baud_val+0x1a8>)
     706:	47a0      	blx	r4
     708:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     70a:	1c2e      	adds	r6, r5, #0
     70c:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     70e:	2000      	movs	r0, #0
     710:	2100      	movs	r1, #0
     712:	2200      	movs	r2, #0
     714:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     716:	243f      	movs	r4, #63	; 0x3f
     718:	46a4      	mov	ip, r4
		bit_shift = (uint64_t)1 << i;
     71a:	2501      	movs	r5, #1
     71c:	46a8      	mov	r8, r5
     71e:	9002      	str	r0, [sp, #8]
     720:	9103      	str	r1, [sp, #12]
     722:	4661      	mov	r1, ip
     724:	3920      	subs	r1, #32
     726:	d403      	bmi.n	730 <_sercom_get_async_baud_val+0x58>
     728:	4640      	mov	r0, r8
     72a:	4088      	lsls	r0, r1
     72c:	4681      	mov	r9, r0
     72e:	e005      	b.n	73c <_sercom_get_async_baud_val+0x64>
     730:	2120      	movs	r1, #32
     732:	4665      	mov	r5, ip
     734:	1b4c      	subs	r4, r1, r5
     736:	4640      	mov	r0, r8
     738:	40e0      	lsrs	r0, r4
     73a:	4681      	mov	r9, r0
     73c:	4641      	mov	r1, r8
     73e:	4664      	mov	r4, ip
     740:	40a1      	lsls	r1, r4
     742:	468a      	mov	sl, r1

		r = r << 1;
     744:	1c10      	adds	r0, r2, #0
     746:	1c19      	adds	r1, r3, #0
     748:	1880      	adds	r0, r0, r2
     74a:	4159      	adcs	r1, r3
     74c:	1c02      	adds	r2, r0, #0
     74e:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     750:	465d      	mov	r5, fp
     752:	464c      	mov	r4, r9
     754:	4225      	tst	r5, r4
     756:	d002      	beq.n	75e <_sercom_get_async_baud_val+0x86>
			r |= 0x01;
     758:	4642      	mov	r2, r8
     75a:	4302      	orrs	r2, r0
     75c:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     75e:	429f      	cmp	r7, r3
     760:	d80c      	bhi.n	77c <_sercom_get_async_baud_val+0xa4>
     762:	d101      	bne.n	768 <_sercom_get_async_baud_val+0x90>
     764:	4296      	cmp	r6, r2
     766:	d809      	bhi.n	77c <_sercom_get_async_baud_val+0xa4>
			r = r - d;
     768:	1b92      	subs	r2, r2, r6
     76a:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     76c:	4650      	mov	r0, sl
     76e:	9d02      	ldr	r5, [sp, #8]
     770:	4328      	orrs	r0, r5
     772:	4649      	mov	r1, r9
     774:	9c03      	ldr	r4, [sp, #12]
     776:	4321      	orrs	r1, r4
     778:	9002      	str	r0, [sp, #8]
     77a:	9103      	str	r1, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     77c:	4665      	mov	r5, ip
     77e:	3d01      	subs	r5, #1
     780:	46ac      	mov	ip, r5
     782:	d2ce      	bcs.n	722 <_sercom_get_async_baud_val+0x4a>
     784:	9802      	ldr	r0, [sp, #8]
     786:	9903      	ldr	r1, [sp, #12]

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
     788:	4b3c      	ldr	r3, [pc, #240]	; (87c <_sercom_get_async_baud_val+0x1a4>)
     78a:	4a3b      	ldr	r2, [pc, #236]	; (878 <_sercom_get_async_baud_val+0x1a0>)
     78c:	1a12      	subs	r2, r2, r0
     78e:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     790:	0c12      	lsrs	r2, r2, #16
     792:	041b      	lsls	r3, r3, #16
     794:	431a      	orrs	r2, r3
     796:	e062      	b.n	85e <_sercom_get_async_baud_val+0x186>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     798:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     79a:	2b01      	cmp	r3, #1
     79c:	d15f      	bne.n	85e <_sercom_get_async_baud_val+0x186>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     79e:	0f4f      	lsrs	r7, r1, #29
     7a0:	46b9      	mov	r9, r7
     7a2:	00cd      	lsls	r5, r1, #3
     7a4:	46ab      	mov	fp, r5
			temp2 = ((uint64_t)baudrate * sample_num);
     7a6:	2100      	movs	r1, #0
     7a8:	1c32      	adds	r2, r6, #0
     7aa:	2300      	movs	r3, #0
     7ac:	4c34      	ldr	r4, [pc, #208]	; (880 <_sercom_get_async_baud_val+0x1a8>)
     7ae:	47a0      	blx	r4
     7b0:	1c06      	adds	r6, r0, #0
     7b2:	1c0f      	adds	r7, r1, #0
     7b4:	2300      	movs	r3, #0
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     7b6:	2501      	movs	r5, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     7b8:	9602      	str	r6, [sp, #8]
     7ba:	9703      	str	r7, [sp, #12]
     7bc:	469a      	mov	sl, r3
     7be:	4650      	mov	r0, sl
     7c0:	b2c0      	uxtb	r0, r0
     7c2:	9005      	str	r0, [sp, #20]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     7c4:	2100      	movs	r1, #0
     7c6:	4688      	mov	r8, r1
     7c8:	2200      	movs	r2, #0
     7ca:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     7cc:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     7ce:	1c27      	adds	r7, r4, #0
     7d0:	3f20      	subs	r7, #32
     7d2:	d403      	bmi.n	7dc <_sercom_get_async_baud_val+0x104>
     7d4:	1c2e      	adds	r6, r5, #0
     7d6:	40be      	lsls	r6, r7
     7d8:	9601      	str	r6, [sp, #4]
     7da:	e004      	b.n	7e6 <_sercom_get_async_baud_val+0x10e>
     7dc:	2020      	movs	r0, #32
     7de:	1b07      	subs	r7, r0, r4
     7e0:	1c29      	adds	r1, r5, #0
     7e2:	40f9      	lsrs	r1, r7
     7e4:	9101      	str	r1, [sp, #4]
     7e6:	1c2e      	adds	r6, r5, #0
     7e8:	40a6      	lsls	r6, r4
     7ea:	9600      	str	r6, [sp, #0]

		r = r << 1;
     7ec:	1c10      	adds	r0, r2, #0
     7ee:	1c19      	adds	r1, r3, #0
     7f0:	1880      	adds	r0, r0, r2
     7f2:	4159      	adcs	r1, r3
     7f4:	1c02      	adds	r2, r0, #0
     7f6:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     7f8:	465f      	mov	r7, fp
     7fa:	4037      	ands	r7, r6
     7fc:	46bc      	mov	ip, r7
     7fe:	9e01      	ldr	r6, [sp, #4]
     800:	464f      	mov	r7, r9
     802:	403e      	ands	r6, r7
     804:	4667      	mov	r7, ip
     806:	433e      	orrs	r6, r7
     808:	d002      	beq.n	810 <_sercom_get_async_baud_val+0x138>
			r |= 0x01;
     80a:	1c2a      	adds	r2, r5, #0
     80c:	4302      	orrs	r2, r0
     80e:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     810:	9803      	ldr	r0, [sp, #12]
     812:	4298      	cmp	r0, r3
     814:	d80b      	bhi.n	82e <_sercom_get_async_baud_val+0x156>
     816:	d102      	bne.n	81e <_sercom_get_async_baud_val+0x146>
     818:	9902      	ldr	r1, [sp, #8]
     81a:	4291      	cmp	r1, r2
     81c:	d807      	bhi.n	82e <_sercom_get_async_baud_val+0x156>
			r = r - d;
     81e:	9e02      	ldr	r6, [sp, #8]
     820:	9f03      	ldr	r7, [sp, #12]
     822:	1b92      	subs	r2, r2, r6
     824:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     826:	4647      	mov	r7, r8
     828:	9800      	ldr	r0, [sp, #0]
     82a:	4307      	orrs	r7, r0
     82c:	46b8      	mov	r8, r7
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     82e:	3c01      	subs	r4, #1
     830:	d2cd      	bcs.n	7ce <_sercom_get_async_baud_val+0xf6>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     832:	4641      	mov	r1, r8
     834:	4652      	mov	r2, sl
     836:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     838:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     83a:	4c12      	ldr	r4, [pc, #72]	; (884 <_sercom_get_async_baud_val+0x1ac>)
     83c:	42a3      	cmp	r3, r4
     83e:	d908      	bls.n	852 <_sercom_get_async_baud_val+0x17a>
     840:	9a05      	ldr	r2, [sp, #20]
     842:	3201      	adds	r2, #1
     844:	b2d2      	uxtb	r2, r2
     846:	9205      	str	r2, [sp, #20]
     848:	2601      	movs	r6, #1
     84a:	44b2      	add	sl, r6
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     84c:	4657      	mov	r7, sl
     84e:	2f08      	cmp	r7, #8
     850:	d1b5      	bne.n	7be <_sercom_get_async_baud_val+0xe6>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     852:	2440      	movs	r4, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     854:	9805      	ldr	r0, [sp, #20]
     856:	2808      	cmp	r0, #8
     858:	d004      	beq.n	864 <_sercom_get_async_baud_val+0x18c>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     85a:	0342      	lsls	r2, r0, #13
     85c:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
     85e:	9c04      	ldr	r4, [sp, #16]
     860:	8022      	strh	r2, [r4, #0]
	return STATUS_OK;
     862:	2400      	movs	r4, #0
}
     864:	1c20      	adds	r0, r4, #0
     866:	b007      	add	sp, #28
     868:	bc3c      	pop	{r2, r3, r4, r5}
     86a:	4690      	mov	r8, r2
     86c:	4699      	mov	r9, r3
     86e:	46a2      	mov	sl, r4
     870:	46ab      	mov	fp, r5
     872:	bdf0      	pop	{r4, r5, r6, r7, pc}
     874:	46c0      	nop			; (mov r8, r8)
     876:	46c0      	nop			; (mov r8, r8)
     878:	00000000 	.word	0x00000000
     87c:	00000001 	.word	0x00000001
     880:	000016f5 	.word	0x000016f5
     884:	00001fff 	.word	0x00001fff

00000888 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     888:	b510      	push	{r4, lr}
     88a:	b082      	sub	sp, #8
     88c:	1c04      	adds	r4, r0, #0
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
     88e:	4b0f      	ldr	r3, [pc, #60]	; (8cc <sercom_set_gclk_generator+0x44>)
     890:	781b      	ldrb	r3, [r3, #0]
     892:	2b00      	cmp	r3, #0
     894:	d001      	beq.n	89a <sercom_set_gclk_generator+0x12>
     896:	2900      	cmp	r1, #0
     898:	d00d      	beq.n	8b6 <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     89a:	a901      	add	r1, sp, #4
     89c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     89e:	2013      	movs	r0, #19
     8a0:	4b0b      	ldr	r3, [pc, #44]	; (8d0 <sercom_set_gclk_generator+0x48>)
     8a2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     8a4:	2013      	movs	r0, #19
     8a6:	4b0b      	ldr	r3, [pc, #44]	; (8d4 <sercom_set_gclk_generator+0x4c>)
     8a8:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
     8aa:	4b08      	ldr	r3, [pc, #32]	; (8cc <sercom_set_gclk_generator+0x44>)
     8ac:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     8ae:	2201      	movs	r2, #1
     8b0:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     8b2:	2000      	movs	r0, #0
     8b4:	e007      	b.n	8c6 <sercom_set_gclk_generator+0x3e>
	} else if (generator_source == _sercom_config.generator_source) {
     8b6:	4b05      	ldr	r3, [pc, #20]	; (8cc <sercom_set_gclk_generator+0x44>)
     8b8:	785a      	ldrb	r2, [r3, #1]
		/* Return status OK if same config. */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
     8ba:	201d      	movs	r0, #29
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config. */
		return STATUS_OK;
     8bc:	1b14      	subs	r4, r2, r4
     8be:	1e62      	subs	r2, r4, #1
     8c0:	4194      	sbcs	r4, r2
     8c2:	4264      	negs	r4, r4
     8c4:	4020      	ands	r0, r4
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     8c6:	b002      	add	sp, #8
     8c8:	bd10      	pop	{r4, pc}
     8ca:	46c0      	nop			; (mov r8, r8)
     8cc:	20000070 	.word	0x20000070
     8d0:	00001279 	.word	0x00001279
     8d4:	000011ed 	.word	0x000011ed

000008d8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     8d8:	4b44      	ldr	r3, [pc, #272]	; (9ec <_sercom_get_default_pad+0x114>)
     8da:	4298      	cmp	r0, r3
     8dc:	d033      	beq.n	946 <_sercom_get_default_pad+0x6e>
     8de:	d806      	bhi.n	8ee <_sercom_get_default_pad+0x16>
     8e0:	4b43      	ldr	r3, [pc, #268]	; (9f0 <_sercom_get_default_pad+0x118>)
     8e2:	4298      	cmp	r0, r3
     8e4:	d00d      	beq.n	902 <_sercom_get_default_pad+0x2a>
     8e6:	4b43      	ldr	r3, [pc, #268]	; (9f4 <_sercom_get_default_pad+0x11c>)
     8e8:	4298      	cmp	r0, r3
     8ea:	d01b      	beq.n	924 <_sercom_get_default_pad+0x4c>
     8ec:	e06f      	b.n	9ce <_sercom_get_default_pad+0xf6>
     8ee:	4b42      	ldr	r3, [pc, #264]	; (9f8 <_sercom_get_default_pad+0x120>)
     8f0:	4298      	cmp	r0, r3
     8f2:	d04a      	beq.n	98a <_sercom_get_default_pad+0xb2>
     8f4:	4b41      	ldr	r3, [pc, #260]	; (9fc <_sercom_get_default_pad+0x124>)
     8f6:	4298      	cmp	r0, r3
     8f8:	d058      	beq.n	9ac <_sercom_get_default_pad+0xd4>
     8fa:	4b41      	ldr	r3, [pc, #260]	; (a00 <_sercom_get_default_pad+0x128>)
     8fc:	4298      	cmp	r0, r3
     8fe:	d166      	bne.n	9ce <_sercom_get_default_pad+0xf6>
     900:	e032      	b.n	968 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     902:	2901      	cmp	r1, #1
     904:	d065      	beq.n	9d2 <_sercom_get_default_pad+0xfa>
     906:	2900      	cmp	r1, #0
     908:	d004      	beq.n	914 <_sercom_get_default_pad+0x3c>
     90a:	2902      	cmp	r1, #2
     90c:	d006      	beq.n	91c <_sercom_get_default_pad+0x44>
     90e:	2903      	cmp	r1, #3
     910:	d006      	beq.n	920 <_sercom_get_default_pad+0x48>
     912:	e001      	b.n	918 <_sercom_get_default_pad+0x40>
     914:	483b      	ldr	r0, [pc, #236]	; (a04 <_sercom_get_default_pad+0x12c>)
     916:	e067      	b.n	9e8 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     918:	2000      	movs	r0, #0
     91a:	e065      	b.n	9e8 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     91c:	483a      	ldr	r0, [pc, #232]	; (a08 <_sercom_get_default_pad+0x130>)
     91e:	e063      	b.n	9e8 <_sercom_get_default_pad+0x110>
     920:	483a      	ldr	r0, [pc, #232]	; (a0c <_sercom_get_default_pad+0x134>)
     922:	e061      	b.n	9e8 <_sercom_get_default_pad+0x110>
     924:	2901      	cmp	r1, #1
     926:	d056      	beq.n	9d6 <_sercom_get_default_pad+0xfe>
     928:	2900      	cmp	r1, #0
     92a:	d004      	beq.n	936 <_sercom_get_default_pad+0x5e>
     92c:	2902      	cmp	r1, #2
     92e:	d006      	beq.n	93e <_sercom_get_default_pad+0x66>
     930:	2903      	cmp	r1, #3
     932:	d006      	beq.n	942 <_sercom_get_default_pad+0x6a>
     934:	e001      	b.n	93a <_sercom_get_default_pad+0x62>
     936:	2003      	movs	r0, #3
     938:	e056      	b.n	9e8 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     93a:	2000      	movs	r0, #0
     93c:	e054      	b.n	9e8 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     93e:	4834      	ldr	r0, [pc, #208]	; (a10 <_sercom_get_default_pad+0x138>)
     940:	e052      	b.n	9e8 <_sercom_get_default_pad+0x110>
     942:	4834      	ldr	r0, [pc, #208]	; (a14 <_sercom_get_default_pad+0x13c>)
     944:	e050      	b.n	9e8 <_sercom_get_default_pad+0x110>
     946:	2901      	cmp	r1, #1
     948:	d047      	beq.n	9da <_sercom_get_default_pad+0x102>
     94a:	2900      	cmp	r1, #0
     94c:	d004      	beq.n	958 <_sercom_get_default_pad+0x80>
     94e:	2902      	cmp	r1, #2
     950:	d006      	beq.n	960 <_sercom_get_default_pad+0x88>
     952:	2903      	cmp	r1, #3
     954:	d006      	beq.n	964 <_sercom_get_default_pad+0x8c>
     956:	e001      	b.n	95c <_sercom_get_default_pad+0x84>
     958:	482f      	ldr	r0, [pc, #188]	; (a18 <_sercom_get_default_pad+0x140>)
     95a:	e045      	b.n	9e8 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     95c:	2000      	movs	r0, #0
     95e:	e043      	b.n	9e8 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     960:	482e      	ldr	r0, [pc, #184]	; (a1c <_sercom_get_default_pad+0x144>)
     962:	e041      	b.n	9e8 <_sercom_get_default_pad+0x110>
     964:	482e      	ldr	r0, [pc, #184]	; (a20 <_sercom_get_default_pad+0x148>)
     966:	e03f      	b.n	9e8 <_sercom_get_default_pad+0x110>
     968:	2901      	cmp	r1, #1
     96a:	d038      	beq.n	9de <_sercom_get_default_pad+0x106>
     96c:	2900      	cmp	r1, #0
     96e:	d004      	beq.n	97a <_sercom_get_default_pad+0xa2>
     970:	2902      	cmp	r1, #2
     972:	d006      	beq.n	982 <_sercom_get_default_pad+0xaa>
     974:	2903      	cmp	r1, #3
     976:	d006      	beq.n	986 <_sercom_get_default_pad+0xae>
     978:	e001      	b.n	97e <_sercom_get_default_pad+0xa6>
     97a:	482a      	ldr	r0, [pc, #168]	; (a24 <_sercom_get_default_pad+0x14c>)
     97c:	e034      	b.n	9e8 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     97e:	2000      	movs	r0, #0
     980:	e032      	b.n	9e8 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     982:	4829      	ldr	r0, [pc, #164]	; (a28 <_sercom_get_default_pad+0x150>)
     984:	e030      	b.n	9e8 <_sercom_get_default_pad+0x110>
     986:	4829      	ldr	r0, [pc, #164]	; (a2c <_sercom_get_default_pad+0x154>)
     988:	e02e      	b.n	9e8 <_sercom_get_default_pad+0x110>
     98a:	2901      	cmp	r1, #1
     98c:	d029      	beq.n	9e2 <_sercom_get_default_pad+0x10a>
     98e:	2900      	cmp	r1, #0
     990:	d004      	beq.n	99c <_sercom_get_default_pad+0xc4>
     992:	2902      	cmp	r1, #2
     994:	d006      	beq.n	9a4 <_sercom_get_default_pad+0xcc>
     996:	2903      	cmp	r1, #3
     998:	d006      	beq.n	9a8 <_sercom_get_default_pad+0xd0>
     99a:	e001      	b.n	9a0 <_sercom_get_default_pad+0xc8>
     99c:	4824      	ldr	r0, [pc, #144]	; (a30 <_sercom_get_default_pad+0x158>)
     99e:	e023      	b.n	9e8 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     9a0:	2000      	movs	r0, #0
     9a2:	e021      	b.n	9e8 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9a4:	4823      	ldr	r0, [pc, #140]	; (a34 <_sercom_get_default_pad+0x15c>)
     9a6:	e01f      	b.n	9e8 <_sercom_get_default_pad+0x110>
     9a8:	4823      	ldr	r0, [pc, #140]	; (a38 <_sercom_get_default_pad+0x160>)
     9aa:	e01d      	b.n	9e8 <_sercom_get_default_pad+0x110>
     9ac:	2901      	cmp	r1, #1
     9ae:	d01a      	beq.n	9e6 <_sercom_get_default_pad+0x10e>
     9b0:	2900      	cmp	r1, #0
     9b2:	d004      	beq.n	9be <_sercom_get_default_pad+0xe6>
     9b4:	2902      	cmp	r1, #2
     9b6:	d006      	beq.n	9c6 <_sercom_get_default_pad+0xee>
     9b8:	2903      	cmp	r1, #3
     9ba:	d006      	beq.n	9ca <_sercom_get_default_pad+0xf2>
     9bc:	e001      	b.n	9c2 <_sercom_get_default_pad+0xea>
     9be:	481f      	ldr	r0, [pc, #124]	; (a3c <_sercom_get_default_pad+0x164>)
     9c0:	e012      	b.n	9e8 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     9c2:	2000      	movs	r0, #0
     9c4:	e010      	b.n	9e8 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9c6:	481e      	ldr	r0, [pc, #120]	; (a40 <_sercom_get_default_pad+0x168>)
     9c8:	e00e      	b.n	9e8 <_sercom_get_default_pad+0x110>
     9ca:	481e      	ldr	r0, [pc, #120]	; (a44 <_sercom_get_default_pad+0x16c>)
     9cc:	e00c      	b.n	9e8 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     9ce:	2000      	movs	r0, #0
     9d0:	e00a      	b.n	9e8 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9d2:	481d      	ldr	r0, [pc, #116]	; (a48 <_sercom_get_default_pad+0x170>)
     9d4:	e008      	b.n	9e8 <_sercom_get_default_pad+0x110>
     9d6:	481d      	ldr	r0, [pc, #116]	; (a4c <_sercom_get_default_pad+0x174>)
     9d8:	e006      	b.n	9e8 <_sercom_get_default_pad+0x110>
     9da:	481d      	ldr	r0, [pc, #116]	; (a50 <_sercom_get_default_pad+0x178>)
     9dc:	e004      	b.n	9e8 <_sercom_get_default_pad+0x110>
     9de:	481d      	ldr	r0, [pc, #116]	; (a54 <_sercom_get_default_pad+0x17c>)
     9e0:	e002      	b.n	9e8 <_sercom_get_default_pad+0x110>
     9e2:	481d      	ldr	r0, [pc, #116]	; (a58 <_sercom_get_default_pad+0x180>)
     9e4:	e000      	b.n	9e8 <_sercom_get_default_pad+0x110>
     9e6:	481d      	ldr	r0, [pc, #116]	; (a5c <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
     9e8:	4770      	bx	lr
     9ea:	46c0      	nop			; (mov r8, r8)
     9ec:	42001000 	.word	0x42001000
     9f0:	42000800 	.word	0x42000800
     9f4:	42000c00 	.word	0x42000c00
     9f8:	42001800 	.word	0x42001800
     9fc:	42001c00 	.word	0x42001c00
     a00:	42001400 	.word	0x42001400
     a04:	00040003 	.word	0x00040003
     a08:	00060003 	.word	0x00060003
     a0c:	00070003 	.word	0x00070003
     a10:	001e0003 	.word	0x001e0003
     a14:	001f0003 	.word	0x001f0003
     a18:	00080003 	.word	0x00080003
     a1c:	000a0003 	.word	0x000a0003
     a20:	000b0003 	.word	0x000b0003
     a24:	00100003 	.word	0x00100003
     a28:	00120003 	.word	0x00120003
     a2c:	00130003 	.word	0x00130003
     a30:	000c0003 	.word	0x000c0003
     a34:	000e0003 	.word	0x000e0003
     a38:	000f0003 	.word	0x000f0003
     a3c:	00160003 	.word	0x00160003
     a40:	00180003 	.word	0x00180003
     a44:	00190003 	.word	0x00190003
     a48:	00050003 	.word	0x00050003
     a4c:	00010003 	.word	0x00010003
     a50:	00090003 	.word	0x00090003
     a54:	00110003 	.word	0x00110003
     a58:	000d0003 	.word	0x000d0003
     a5c:	00170003 	.word	0x00170003

00000a60 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     a60:	b570      	push	{r4, r5, r6, lr}
     a62:	b086      	sub	sp, #24
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     a64:	4a0c      	ldr	r2, [pc, #48]	; (a98 <_sercom_get_sercom_inst_index+0x38>)
     a66:	466b      	mov	r3, sp
     a68:	ca70      	ldmia	r2!, {r4, r5, r6}
     a6a:	c370      	stmia	r3!, {r4, r5, r6}
     a6c:	ca32      	ldmia	r2!, {r1, r4, r5}
     a6e:	c332      	stmia	r3!, {r1, r4, r5}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     a70:	9e00      	ldr	r6, [sp, #0]
     a72:	4286      	cmp	r6, r0
     a74:	d006      	beq.n	a84 <_sercom_get_sercom_inst_index+0x24>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     a76:	2301      	movs	r3, #1
     a78:	009a      	lsls	r2, r3, #2
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     a7a:	4669      	mov	r1, sp
     a7c:	5852      	ldr	r2, [r2, r1]
     a7e:	4282      	cmp	r2, r0
     a80:	d103      	bne.n	a8a <_sercom_get_sercom_inst_index+0x2a>
     a82:	e000      	b.n	a86 <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     a84:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     a86:	b2d8      	uxtb	r0, r3
     a88:	e003      	b.n	a92 <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     a8a:	3301      	adds	r3, #1
     a8c:	2b06      	cmp	r3, #6
     a8e:	d1f3      	bne.n	a78 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     a90:	2000      	movs	r0, #0
}
     a92:	b006      	add	sp, #24
     a94:	bd70      	pop	{r4, r5, r6, pc}
     a96:	46c0      	nop			; (mov r8, r8)
     a98:	00001a58 	.word	0x00001a58

00000a9c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
     a9e:	465f      	mov	r7, fp
     aa0:	4656      	mov	r6, sl
     aa2:	464d      	mov	r5, r9
     aa4:	4644      	mov	r4, r8
     aa6:	b4f0      	push	{r4, r5, r6, r7}
     aa8:	b091      	sub	sp, #68	; 0x44
     aaa:	1c05      	adds	r5, r0, #0
     aac:	1c0c      	adds	r4, r1, #0
     aae:	1c16      	adds	r6, r2, #0
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     ab0:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     ab2:	1c08      	adds	r0, r1, #0
     ab4:	4b9e      	ldr	r3, [pc, #632]	; (d30 <usart_init+0x294>)
     ab6:	4798      	blx	r3
     ab8:	1c02      	adds	r2, r0, #0
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     aba:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     abc:	2005      	movs	r0, #5
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     abe:	07d9      	lsls	r1, r3, #31
     ac0:	d500      	bpl.n	ac4 <usart_init+0x28>
     ac2:	e12d      	b.n	d20 <usart_init+0x284>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     ac4:	6823      	ldr	r3, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     ac6:	201c      	movs	r0, #28
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     ac8:	079f      	lsls	r7, r3, #30
     aca:	d500      	bpl.n	ace <usart_init+0x32>
     acc:	e128      	b.n	d20 <usart_init+0x284>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     ace:	4b99      	ldr	r3, [pc, #612]	; (d34 <usart_init+0x298>)
     ad0:	6a18      	ldr	r0, [r3, #32]

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     ad2:	1c91      	adds	r1, r2, #2
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
	}

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     ad4:	2701      	movs	r7, #1
     ad6:	408f      	lsls	r7, r1
     ad8:	1c39      	adds	r1, r7, #0
     ada:	4301      	orrs	r1, r0
     adc:	6219      	str	r1, [r3, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     ade:	a90f      	add	r1, sp, #60	; 0x3c
     ae0:	272d      	movs	r7, #45	; 0x2d
     ae2:	5df3      	ldrb	r3, [r6, r7]
     ae4:	700b      	strb	r3, [r1, #0]
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     ae6:	3214      	adds	r2, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     ae8:	b2d2      	uxtb	r2, r2
     aea:	4690      	mov	r8, r2
     aec:	1c10      	adds	r0, r2, #0
     aee:	4b92      	ldr	r3, [pc, #584]	; (d38 <usart_init+0x29c>)
     af0:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     af2:	4640      	mov	r0, r8
     af4:	4b91      	ldr	r3, [pc, #580]	; (d3c <usart_init+0x2a0>)
     af6:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     af8:	5df0      	ldrb	r0, [r6, r7]
     afa:	2100      	movs	r1, #0
     afc:	4b90      	ldr	r3, [pc, #576]	; (d40 <usart_init+0x2a4>)
     afe:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     b00:	7af3      	ldrb	r3, [r6, #11]
     b02:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     b04:	2324      	movs	r3, #36	; 0x24
     b06:	5cf3      	ldrb	r3, [r6, r3]
     b08:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     b0a:	2325      	movs	r3, #37	; 0x25
     b0c:	5cf3      	ldrb	r3, [r6, r3]
     b0e:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
     b10:	7ef3      	ldrb	r3, [r6, #27]
     b12:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     b14:	7f33      	ldrb	r3, [r6, #28]
     b16:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     b18:	6829      	ldr	r1, [r5, #0]
     b1a:	4688      	mov	r8, r1

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     b1c:	1c08      	adds	r0, r1, #0
     b1e:	4b84      	ldr	r3, [pc, #528]	; (d30 <usart_init+0x294>)
     b20:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     b22:	3014      	adds	r0, #20

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;
     b24:	2200      	movs	r2, #0
     b26:	466b      	mov	r3, sp
     b28:	84da      	strh	r2, [r3, #38]	; 0x26

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     b2a:	8a32      	ldrh	r2, [r6, #16]
     b2c:	9202      	str	r2, [sp, #8]
     b2e:	2380      	movs	r3, #128	; 0x80
     b30:	01db      	lsls	r3, r3, #7
     b32:	429a      	cmp	r2, r3
     b34:	d021      	beq.n	b7a <usart_init+0xde>
     b36:	2380      	movs	r3, #128	; 0x80
     b38:	01db      	lsls	r3, r3, #7
     b3a:	429a      	cmp	r2, r3
     b3c:	d804      	bhi.n	b48 <usart_init+0xac>
     b3e:	2380      	movs	r3, #128	; 0x80
     b40:	019b      	lsls	r3, r3, #6
     b42:	429a      	cmp	r2, r3
     b44:	d011      	beq.n	b6a <usart_init+0xce>
     b46:	e008      	b.n	b5a <usart_init+0xbe>
     b48:	23c0      	movs	r3, #192	; 0xc0
     b4a:	01db      	lsls	r3, r3, #7
     b4c:	9f02      	ldr	r7, [sp, #8]
     b4e:	429f      	cmp	r7, r3
     b50:	d00f      	beq.n	b72 <usart_init+0xd6>
     b52:	2380      	movs	r3, #128	; 0x80
     b54:	021b      	lsls	r3, r3, #8
     b56:	429f      	cmp	r7, r3
     b58:	d003      	beq.n	b62 <usart_init+0xc6>
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     b5a:	2710      	movs	r7, #16
     b5c:	9706      	str	r7, [sp, #24]
	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     b5e:	2700      	movs	r7, #0
     b60:	e00e      	b.n	b80 <usart_init+0xe4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     b62:	2703      	movs	r7, #3
     b64:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     b66:	2700      	movs	r7, #0
     b68:	e00a      	b.n	b80 <usart_init+0xe4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     b6a:	2710      	movs	r7, #16
     b6c:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     b6e:	2701      	movs	r7, #1
     b70:	e006      	b.n	b80 <usart_init+0xe4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     b72:	2708      	movs	r7, #8
     b74:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     b76:	2701      	movs	r7, #1
     b78:	e002      	b.n	b80 <usart_init+0xe4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     b7a:	2708      	movs	r7, #8
     b7c:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     b7e:	2700      	movs	r7, #0
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     b80:	6831      	ldr	r1, [r6, #0]
     b82:	9103      	str	r1, [sp, #12]
		(uint32_t)config->mux_setting |
     b84:	68f2      	ldr	r2, [r6, #12]
     b86:	4691      	mov	r9, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     b88:	6973      	ldr	r3, [r6, #20]
     b8a:	9304      	str	r3, [sp, #16]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     b8c:	7e31      	ldrb	r1, [r6, #24]
     b8e:	468a      	mov	sl, r1
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     b90:	2326      	movs	r3, #38	; 0x26
     b92:	5cf3      	ldrb	r3, [r6, r3]
     b94:	469b      	mov	fp, r3

	enum status_code status_code = STATUS_OK;

	/* Get baud value from mode and clock */
	switch (config->transfer_mode)
     b96:	6873      	ldr	r3, [r6, #4]
     b98:	2b00      	cmp	r3, #0
     b9a:	d013      	beq.n	bc4 <usart_init+0x128>
     b9c:	2280      	movs	r2, #128	; 0x80
     b9e:	0552      	lsls	r2, r2, #21
     ba0:	4293      	cmp	r3, r2
     ba2:	d12e      	bne.n	c02 <usart_init+0x166>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     ba4:	2327      	movs	r3, #39	; 0x27
     ba6:	5cf3      	ldrb	r3, [r6, r3]
     ba8:	2b00      	cmp	r3, #0
     baa:	d12e      	bne.n	c0a <usart_init+0x16e>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     bac:	6a37      	ldr	r7, [r6, #32]
     bae:	b2c0      	uxtb	r0, r0
     bb0:	4b64      	ldr	r3, [pc, #400]	; (d44 <usart_init+0x2a8>)
     bb2:	4798      	blx	r3
     bb4:	1c01      	adds	r1, r0, #0
     bb6:	1c38      	adds	r0, r7, #0
     bb8:	466a      	mov	r2, sp
     bba:	3226      	adds	r2, #38	; 0x26
     bbc:	4b62      	ldr	r3, [pc, #392]	; (d48 <usart_init+0x2ac>)
     bbe:	4798      	blx	r3
     bc0:	1c03      	adds	r3, r0, #0
     bc2:	e01f      	b.n	c04 <usart_init+0x168>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     bc4:	2327      	movs	r3, #39	; 0x27
     bc6:	5cf3      	ldrb	r3, [r6, r3]
     bc8:	2b00      	cmp	r3, #0
     bca:	d00a      	beq.n	be2 <usart_init+0x146>
				status_code =
     bcc:	9a06      	ldr	r2, [sp, #24]
     bce:	9200      	str	r2, [sp, #0]
     bd0:	6a30      	ldr	r0, [r6, #32]
     bd2:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     bd4:	466a      	mov	r2, sp
     bd6:	3226      	adds	r2, #38	; 0x26
     bd8:	1c3b      	adds	r3, r7, #0
     bda:	4f5c      	ldr	r7, [pc, #368]	; (d4c <usart_init+0x2b0>)
     bdc:	47b8      	blx	r7
     bde:	1c03      	adds	r3, r0, #0
     be0:	e010      	b.n	c04 <usart_init+0x168>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     be2:	6a31      	ldr	r1, [r6, #32]
     be4:	9107      	str	r1, [sp, #28]
     be6:	b2c0      	uxtb	r0, r0
     be8:	4b56      	ldr	r3, [pc, #344]	; (d44 <usart_init+0x2a8>)
     bea:	4798      	blx	r3
     bec:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
     bee:	9a06      	ldr	r2, [sp, #24]
     bf0:	9200      	str	r2, [sp, #0]
     bf2:	9807      	ldr	r0, [sp, #28]
     bf4:	466a      	mov	r2, sp
     bf6:	3226      	adds	r2, #38	; 0x26
     bf8:	1c3b      	adds	r3, r7, #0
     bfa:	4f54      	ldr	r7, [pc, #336]	; (d4c <usart_init+0x2b0>)
     bfc:	47b8      	blx	r7
     bfe:	1c03      	adds	r3, r0, #0
     c00:	e000      	b.n	c04 <usart_init+0x168>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
     c02:	2300      	movs	r3, #0
     c04:	1e18      	subs	r0, r3, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
     c06:	d000      	beq.n	c0a <usart_init+0x16e>
     c08:	e08a      	b.n	d20 <usart_init+0x284>
		/* Abort */
		return status_code;
	}

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
     c0a:	7e73      	ldrb	r3, [r6, #25]
     c0c:	2b00      	cmp	r3, #0
     c0e:	d002      	beq.n	c16 <usart_init+0x17a>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     c10:	7eb3      	ldrb	r3, [r6, #26]
     c12:	4641      	mov	r1, r8
     c14:	738b      	strb	r3, [r1, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     c16:	682a      	ldr	r2, [r5, #0]
     c18:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     c1a:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     c1c:	2b00      	cmp	r3, #0
     c1e:	d1fc      	bne.n	c1a <usart_init+0x17e>
     c20:	9702      	str	r7, [sp, #8]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
     c22:	466b      	mov	r3, sp
     c24:	3326      	adds	r3, #38	; 0x26
     c26:	881b      	ldrh	r3, [r3, #0]
     c28:	4642      	mov	r2, r8
     c2a:	8193      	strh	r3, [r2, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     c2c:	464b      	mov	r3, r9
     c2e:	9f03      	ldr	r7, [sp, #12]
     c30:	433b      	orrs	r3, r7
		(uint32_t)config->mux_setting |
     c32:	9f04      	ldr	r7, [sp, #16]
     c34:	433b      	orrs	r3, r7
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     c36:	6871      	ldr	r1, [r6, #4]
     c38:	430b      	orrs	r3, r1
		config->sample_rate |
     c3a:	9f02      	ldr	r7, [sp, #8]
     c3c:	431f      	orrs	r7, r3
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     c3e:	4652      	mov	r2, sl
     c40:	0213      	lsls	r3, r2, #8
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     c42:	431f      	orrs	r7, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     c44:	4659      	mov	r1, fp
     c46:	074b      	lsls	r3, r1, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= config->transfer_mode;
     c48:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
     c4a:	2327      	movs	r3, #39	; 0x27
     c4c:	5cf3      	ldrb	r3, [r6, r3]
     c4e:	2b00      	cmp	r3, #0
     c50:	d101      	bne.n	c56 <usart_init+0x1ba>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     c52:	2304      	movs	r3, #4
     c54:	431f      	orrs	r7, r3
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     c56:	7e71      	ldrb	r1, [r6, #25]
     c58:	0289      	lsls	r1, r1, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     c5a:	7f33      	ldrb	r3, [r6, #28]
     c5c:	025b      	lsls	r3, r3, #9
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
     c5e:	4319      	orrs	r1, r3
     c60:	7af2      	ldrb	r2, [r6, #11]
     c62:	7ab3      	ldrb	r3, [r6, #10]
     c64:	4313      	orrs	r3, r2
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     c66:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     c68:	7f73      	ldrb	r3, [r6, #29]
     c6a:	021b      	lsls	r3, r3, #8
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     c6c:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     c6e:	2324      	movs	r3, #36	; 0x24
     c70:	5cf3      	ldrb	r3, [r6, r3]
     c72:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     c74:	4319      	orrs	r1, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     c76:	2325      	movs	r3, #37	; 0x25
     c78:	5cf3      	ldrb	r3, [r6, r3]
     c7a:	041b      	lsls	r3, r3, #16
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
     c7c:	4319      	orrs	r1, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);

	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
     c7e:	8933      	ldrh	r3, [r6, #8]
     c80:	2bff      	cmp	r3, #255	; 0xff
     c82:	d00b      	beq.n	c9c <usart_init+0x200>
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
     c84:	7ef2      	ldrb	r2, [r6, #27]
     c86:	2a00      	cmp	r2, #0
     c88:	d003      	beq.n	c92 <usart_init+0x1f6>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x5);
     c8a:	22a0      	movs	r2, #160	; 0xa0
     c8c:	04d2      	lsls	r2, r2, #19
     c8e:	4317      	orrs	r7, r2
     c90:	e002      	b.n	c98 <usart_init+0x1fc>
		} else {
			ctrla |= SERCOM_USART_CTRLA_FORM(1);
     c92:	2280      	movs	r2, #128	; 0x80
     c94:	0452      	lsls	r2, r2, #17
     c96:	4317      	orrs	r7, r2
		}
#else
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
#endif
		ctrlb |= config->parity;
     c98:	4319      	orrs	r1, r3
     c9a:	e005      	b.n	ca8 <usart_init+0x20c>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
     c9c:	7ef3      	ldrb	r3, [r6, #27]
     c9e:	2b00      	cmp	r3, #0
     ca0:	d002      	beq.n	ca8 <usart_init+0x20c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     ca2:	2380      	movs	r3, #128	; 0x80
     ca4:	04db      	lsls	r3, r3, #19
     ca6:	431f      	orrs	r7, r3
		ctrla |= SERCOM_USART_CTRLA_FORM(0);
#endif
	}

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     ca8:	232c      	movs	r3, #44	; 0x2c
     caa:	5cf3      	ldrb	r3, [r6, r3]
     cac:	2b00      	cmp	r3, #0
     cae:	d103      	bne.n	cb8 <usart_init+0x21c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     cb0:	4b27      	ldr	r3, [pc, #156]	; (d50 <usart_init+0x2b4>)
     cb2:	789b      	ldrb	r3, [r3, #2]
     cb4:	079a      	lsls	r2, r3, #30
     cb6:	d501      	bpl.n	cbc <usart_init+0x220>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     cb8:	2380      	movs	r3, #128	; 0x80
     cba:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     cbc:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     cbe:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     cc0:	2b00      	cmp	r3, #0
     cc2:	d1fc      	bne.n	cbe <usart_init+0x222>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
     cc4:	4643      	mov	r3, r8
     cc6:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     cc8:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     cca:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     ccc:	2b00      	cmp	r3, #0
     cce:	d1fc      	bne.n	cca <usart_init+0x22e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
     cd0:	4641      	mov	r1, r8
     cd2:	600f      	str	r7, [r1, #0]
     cd4:	ab0e      	add	r3, sp, #56	; 0x38
     cd6:	2280      	movs	r2, #128	; 0x80
     cd8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     cda:	2200      	movs	r2, #0
     cdc:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     cde:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     ce0:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
     ce2:	6b32      	ldr	r2, [r6, #48]	; 0x30
     ce4:	920a      	str	r2, [sp, #40]	; 0x28
     ce6:	6b73      	ldr	r3, [r6, #52]	; 0x34
     ce8:	930b      	str	r3, [sp, #44]	; 0x2c
     cea:	6bb7      	ldr	r7, [r6, #56]	; 0x38
     cec:	970c      	str	r7, [sp, #48]	; 0x30
     cee:	6bf6      	ldr	r6, [r6, #60]	; 0x3c
     cf0:	960d      	str	r6, [sp, #52]	; 0x34
     cf2:	2500      	movs	r5, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     cf4:	ae0e      	add	r6, sp, #56	; 0x38
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     cf6:	4f17      	ldr	r7, [pc, #92]	; (d54 <usart_init+0x2b8>)
     cf8:	b2e9      	uxtb	r1, r5
     cfa:	00ab      	lsls	r3, r5, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     cfc:	aa0a      	add	r2, sp, #40	; 0x28
     cfe:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     d00:	2800      	cmp	r0, #0
     d02:	d102      	bne.n	d0a <usart_init+0x26e>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     d04:	1c20      	adds	r0, r4, #0
     d06:	4a14      	ldr	r2, [pc, #80]	; (d58 <usart_init+0x2bc>)
     d08:	4790      	blx	r2
		}

		if (current_pinmux != PINMUX_UNUSED) {
     d0a:	1c43      	adds	r3, r0, #1
     d0c:	d004      	beq.n	d18 <usart_init+0x27c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     d0e:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     d10:	0c00      	lsrs	r0, r0, #16
     d12:	b2c0      	uxtb	r0, r0
     d14:	1c31      	adds	r1, r6, #0
     d16:	47b8      	blx	r7
     d18:	3501      	adds	r5, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     d1a:	2d04      	cmp	r5, #4
     d1c:	d1ec      	bne.n	cf8 <usart_init+0x25c>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
     d1e:	2000      	movs	r0, #0
}
     d20:	b011      	add	sp, #68	; 0x44
     d22:	bc3c      	pop	{r2, r3, r4, r5}
     d24:	4690      	mov	r8, r2
     d26:	4699      	mov	r9, r3
     d28:	46a2      	mov	sl, r4
     d2a:	46ab      	mov	fp, r5
     d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d2e:	46c0      	nop			; (mov r8, r8)
     d30:	00000a61 	.word	0x00000a61
     d34:	40000400 	.word	0x40000400
     d38:	00001279 	.word	0x00001279
     d3c:	000011ed 	.word	0x000011ed
     d40:	00000889 	.word	0x00000889
     d44:	00001295 	.word	0x00001295
     d48:	000006b1 	.word	0x000006b1
     d4c:	000006d9 	.word	0x000006d9
     d50:	41002000 	.word	0x41002000
     d54:	00001355 	.word	0x00001355
     d58:	000008d9 	.word	0x000008d9

00000d5c <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
     d5c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     d5e:	6803      	ldr	r3, [r0, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     d60:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     d62:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     d64:	2a00      	cmp	r2, #0
     d66:	d00c      	beq.n	d82 <usart_write_wait+0x26>
		return STATUS_BUSY;
	}

#else
	/* Check if USART is ready for new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE)) {
     d68:	7e1a      	ldrb	r2, [r3, #24]
		/* Return error code */
		return STATUS_BUSY;
     d6a:	2005      	movs	r0, #5
		return STATUS_BUSY;
	}

#else
	/* Check if USART is ready for new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE)) {
     d6c:	07d4      	lsls	r4, r2, #31
     d6e:	d508      	bpl.n	d82 <usart_write_wait+0x26>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     d70:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     d72:	2a00      	cmp	r2, #0
     d74:	d1fc      	bne.n	d70 <usart_write_wait+0x14>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
     d76:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     d78:	2102      	movs	r1, #2
     d7a:	7e1a      	ldrb	r2, [r3, #24]
     d7c:	420a      	tst	r2, r1
     d7e:	d0fc      	beq.n	d7a <usart_write_wait+0x1e>
		/* Wait until data is sent */
	}

	return STATUS_OK;
     d80:	2000      	movs	r0, #0
}
     d82:	bd10      	pop	{r4, pc}

00000d84 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     d84:	b5f0      	push	{r4, r5, r6, r7, lr}
     d86:	4657      	mov	r7, sl
     d88:	464e      	mov	r6, r9
     d8a:	4645      	mov	r5, r8
     d8c:	b4e0      	push	{r5, r6, r7}
     d8e:	1c06      	adds	r6, r0, #0
     d90:	4688      	mov	r8, r1
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     d92:	2017      	movs	r0, #23
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
     d94:	2a00      	cmp	r2, #0
     d96:	d04a      	beq.n	e2e <usart_write_buffer_wait+0xaa>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     d98:	79f3      	ldrb	r3, [r6, #7]
		return STATUS_ERR_DENIED;
     d9a:	201c      	movs	r0, #28
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     d9c:	2b00      	cmp	r3, #0
     d9e:	d046      	beq.n	e2e <usart_write_buffer_wait+0xaa>
		return STATUS_ERR_DENIED;
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     da0:	6834      	ldr	r4, [r6, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     da2:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     da4:	2b00      	cmp	r3, #0
     da6:	d1fc      	bne.n	da2 <usart_write_buffer_wait+0x1e>
     da8:	4692      	mov	sl, r2
     daa:	2700      	movs	r7, #0
	/* Blocks while buffer is being transferred */
	while (length--) {
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     dac:	2501      	movs	r5, #1
     dae:	4a22      	ldr	r2, [pc, #136]	; (e38 <usart_write_buffer_wait+0xb4>)
     db0:	4691      	mov	r9, r2
     db2:	e01f      	b.n	df4 <usart_write_buffer_wait+0x70>
     db4:	7e22      	ldrb	r2, [r4, #24]
     db6:	422a      	tst	r2, r5
     db8:	d104      	bne.n	dc4 <usart_write_buffer_wait+0x40>
				break;
			} else if (i == USART_TIMEOUT) {
     dba:	2b01      	cmp	r3, #1
     dbc:	d029      	beq.n	e12 <usart_write_buffer_wait+0x8e>
     dbe:	3b01      	subs	r3, #1

	/* Blocks while buffer is being transferred */
	while (length--) {
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     dc0:	2b00      	cmp	r3, #0
     dc2:	d1f7      	bne.n	db4 <usart_write_buffer_wait+0x30>
				return STATUS_ERR_TIMEOUT;
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
     dc4:	1c7b      	adds	r3, r7, #1
     dc6:	b29b      	uxth	r3, r3
     dc8:	4642      	mov	r2, r8
     dca:	5dd1      	ldrb	r1, [r2, r7]

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     dcc:	7972      	ldrb	r2, [r6, #5]
     dce:	2a01      	cmp	r2, #1
     dd0:	d001      	beq.n	dd6 <usart_write_buffer_wait+0x52>
				return STATUS_ERR_TIMEOUT;
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
     dd2:	1c1f      	adds	r7, r3, #0
     dd4:	e005      	b.n	de2 <usart_write_buffer_wait+0x5e>

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
			data_to_send |= (tx_data[tx_pos++] << 8);
     dd6:	1cba      	adds	r2, r7, #2
     dd8:	b297      	uxth	r7, r2
     dda:	4642      	mov	r2, r8
     ddc:	5cd3      	ldrb	r3, [r2, r3]
     dde:	021b      	lsls	r3, r3, #8
     de0:	4319      	orrs	r1, r3
		}

		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
     de2:	1c30      	adds	r0, r6, #0
     de4:	4b15      	ldr	r3, [pc, #84]	; (e3c <usart_write_buffer_wait+0xb8>)
     de6:	4798      	blx	r3
     de8:	4653      	mov	r3, sl
     dea:	3b01      	subs	r3, #1
     dec:	b29b      	uxth	r3, r3
     dee:	469a      	mov	sl, r3
	_usart_wait_for_sync(module);

	uint16_t tx_pos = 0;

	/* Blocks while buffer is being transferred */
	while (length--) {
     df0:	2b00      	cmp	r3, #0
     df2:	d016      	beq.n	e22 <usart_write_buffer_wait+0x9e>
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     df4:	7e23      	ldrb	r3, [r4, #24]
     df6:	422b      	tst	r3, r5
     df8:	d1e4      	bne.n	dc4 <usart_write_buffer_wait+0x40>
     dfa:	464b      	mov	r3, r9
     dfc:	e7da      	b.n	db4 <usart_write_buffer_wait+0x30>
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
     dfe:	7e22      	ldrb	r2, [r4, #24]
     e00:	420a      	tst	r2, r1
     e02:	d108      	bne.n	e16 <usart_write_buffer_wait+0x92>
			break;
		} else if (i == USART_TIMEOUT) {
     e04:	2b01      	cmp	r3, #1
     e06:	d008      	beq.n	e1a <usart_write_buffer_wait+0x96>
     e08:	3b01      	subs	r3, #1
		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     e0a:	2b00      	cmp	r3, #0
     e0c:	d1f7      	bne.n	dfe <usart_write_buffer_wait+0x7a>
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
     e0e:	2000      	movs	r0, #0
     e10:	e00d      	b.n	e2e <usart_write_buffer_wait+0xaa>
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
				break;
			} else if (i == USART_TIMEOUT) {
				return STATUS_ERR_TIMEOUT;
     e12:	2012      	movs	r0, #18
     e14:	e00b      	b.n	e2e <usart_write_buffer_wait+0xaa>
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
     e16:	2000      	movs	r0, #0
     e18:	e009      	b.n	e2e <usart_write_buffer_wait+0xaa>
	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
			break;
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
     e1a:	2012      	movs	r0, #18
     e1c:	e007      	b.n	e2e <usart_write_buffer_wait+0xaa>
		}
	}

	return STATUS_OK;
     e1e:	2000      	movs	r0, #0
     e20:	e005      	b.n	e2e <usart_write_buffer_wait+0xaa>
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
     e22:	7e23      	ldrb	r3, [r4, #24]
     e24:	079a      	lsls	r2, r3, #30
     e26:	d4fa      	bmi.n	e1e <usart_write_buffer_wait+0x9a>
     e28:	4b03      	ldr	r3, [pc, #12]	; (e38 <usart_write_buffer_wait+0xb4>)
     e2a:	2102      	movs	r1, #2
     e2c:	e7e7      	b.n	dfe <usart_write_buffer_wait+0x7a>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
     e2e:	bc1c      	pop	{r2, r3, r4}
     e30:	4690      	mov	r8, r2
     e32:	4699      	mov	r9, r3
     e34:	46a2      	mov	sl, r4
     e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e38:	0000ffff 	.word	0x0000ffff
     e3c:	00000d5d 	.word	0x00000d5d

00000e40 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     e40:	b508      	push	{r3, lr}
	switch (clock_source) {
     e42:	2808      	cmp	r0, #8
     e44:	d834      	bhi.n	eb0 <system_clock_source_get_hz+0x70>
     e46:	0080      	lsls	r0, r0, #2
     e48:	4b1b      	ldr	r3, [pc, #108]	; (eb8 <system_clock_source_get_hz+0x78>)
     e4a:	581b      	ldr	r3, [r3, r0]
     e4c:	469f      	mov	pc, r3

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
     e4e:	2080      	movs	r0, #128	; 0x80
     e50:	0200      	lsls	r0, r0, #8
     e52:	e030      	b.n	eb6 <system_clock_source_get_hz+0x76>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
     e54:	4b19      	ldr	r3, [pc, #100]	; (ebc <system_clock_source_get_hz+0x7c>)
     e56:	6918      	ldr	r0, [r3, #16]
     e58:	e02d      	b.n	eb6 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     e5a:	4b19      	ldr	r3, [pc, #100]	; (ec0 <system_clock_source_get_hz+0x80>)
     e5c:	6a18      	ldr	r0, [r3, #32]
     e5e:	0580      	lsls	r0, r0, #22
     e60:	0f80      	lsrs	r0, r0, #30
     e62:	4b18      	ldr	r3, [pc, #96]	; (ec4 <system_clock_source_get_hz+0x84>)
     e64:	40c3      	lsrs	r3, r0
     e66:	1c18      	adds	r0, r3, #0
     e68:	e025      	b.n	eb6 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
     e6a:	4b14      	ldr	r3, [pc, #80]	; (ebc <system_clock_source_get_hz+0x7c>)
     e6c:	6958      	ldr	r0, [r3, #20]
     e6e:	e022      	b.n	eb6 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     e70:	4b12      	ldr	r3, [pc, #72]	; (ebc <system_clock_source_get_hz+0x7c>)
     e72:	681b      	ldr	r3, [r3, #0]
     e74:	2002      	movs	r0, #2
     e76:	4018      	ands	r0, r3
     e78:	d01d      	beq.n	eb6 <system_clock_source_get_hz+0x76>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     e7a:	4911      	ldr	r1, [pc, #68]	; (ec0 <system_clock_source_get_hz+0x80>)
     e7c:	2210      	movs	r2, #16
     e7e:	68cb      	ldr	r3, [r1, #12]
     e80:	421a      	tst	r2, r3
     e82:	d0fc      	beq.n	e7e <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
     e84:	4b0d      	ldr	r3, [pc, #52]	; (ebc <system_clock_source_get_hz+0x7c>)
     e86:	681b      	ldr	r3, [r3, #0]
     e88:	075a      	lsls	r2, r3, #29
     e8a:	d513      	bpl.n	eb4 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     e8c:	2000      	movs	r0, #0
     e8e:	4b0e      	ldr	r3, [pc, #56]	; (ec8 <system_clock_source_get_hz+0x88>)
     e90:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     e92:	4b0a      	ldr	r3, [pc, #40]	; (ebc <system_clock_source_get_hz+0x7c>)
     e94:	689b      	ldr	r3, [r3, #8]
     e96:	041b      	lsls	r3, r3, #16
     e98:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     e9a:	4358      	muls	r0, r3
     e9c:	e00b      	b.n	eb6 <system_clock_source_get_hz+0x76>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     e9e:	2350      	movs	r3, #80	; 0x50
     ea0:	4a07      	ldr	r2, [pc, #28]	; (ec0 <system_clock_source_get_hz+0x80>)
     ea2:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     ea4:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     ea6:	075a      	lsls	r2, r3, #29
     ea8:	d505      	bpl.n	eb6 <system_clock_source_get_hz+0x76>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
     eaa:	4b04      	ldr	r3, [pc, #16]	; (ebc <system_clock_source_get_hz+0x7c>)
     eac:	68d8      	ldr	r0, [r3, #12]
     eae:	e002      	b.n	eb6 <system_clock_source_get_hz+0x76>
#endif

	default:
		return 0;
     eb0:	2000      	movs	r0, #0
     eb2:	e000      	b.n	eb6 <system_clock_source_get_hz+0x76>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
     eb4:	4805      	ldr	r0, [pc, #20]	; (ecc <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
     eb6:	bd08      	pop	{r3, pc}
     eb8:	00001a70 	.word	0x00001a70
     ebc:	20000074 	.word	0x20000074
     ec0:	40000800 	.word	0x40000800
     ec4:	007a1200 	.word	0x007a1200
     ec8:	00001295 	.word	0x00001295
     ecc:	02dc6c00 	.word	0x02dc6c00

00000ed0 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     ed0:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     ed2:	4b0c      	ldr	r3, [pc, #48]	; (f04 <system_clock_source_osc8m_set_config+0x34>)
     ed4:	6a1c      	ldr	r4, [r3, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     ed6:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     ed8:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     eda:	7840      	ldrb	r0, [r0, #1]
     edc:	2201      	movs	r2, #1
     ede:	4010      	ands	r0, r2
     ee0:	0180      	lsls	r0, r0, #6
     ee2:	2640      	movs	r6, #64	; 0x40
     ee4:	43b4      	bics	r4, r6
     ee6:	4304      	orrs	r4, r0
     ee8:	402a      	ands	r2, r5
     eea:	01d0      	lsls	r0, r2, #7
     eec:	2280      	movs	r2, #128	; 0x80
     eee:	4394      	bics	r4, r2
     ef0:	1c22      	adds	r2, r4, #0
     ef2:	4302      	orrs	r2, r0
     ef4:	2003      	movs	r0, #3
     ef6:	4001      	ands	r1, r0
     ef8:	0209      	lsls	r1, r1, #8
     efa:	4803      	ldr	r0, [pc, #12]	; (f08 <system_clock_source_osc8m_set_config+0x38>)
     efc:	4002      	ands	r2, r0
     efe:	430a      	orrs	r2, r1
     f00:	621a      	str	r2, [r3, #32]
}
     f02:	bd70      	pop	{r4, r5, r6, pc}
     f04:	40000800 	.word	0x40000800
     f08:	fffffcff 	.word	0xfffffcff

00000f0c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     f0c:	2808      	cmp	r0, #8
     f0e:	d843      	bhi.n	f98 <system_clock_source_enable+0x8c>
     f10:	0080      	lsls	r0, r0, #2
     f12:	4b22      	ldr	r3, [pc, #136]	; (f9c <system_clock_source_enable+0x90>)
     f14:	581b      	ldr	r3, [r3, r0]
     f16:	469f      	mov	pc, r3
		break;
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
     f18:	2000      	movs	r0, #0
     f1a:	e03e      	b.n	f9a <system_clock_source_enable+0x8e>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     f1c:	4b20      	ldr	r3, [pc, #128]	; (fa0 <system_clock_source_enable+0x94>)
     f1e:	6a19      	ldr	r1, [r3, #32]
     f20:	2202      	movs	r2, #2
     f22:	430a      	orrs	r2, r1
     f24:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
     f26:	2000      	movs	r0, #0
     f28:	e037      	b.n	f9a <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     f2a:	4b1d      	ldr	r3, [pc, #116]	; (fa0 <system_clock_source_enable+0x94>)
     f2c:	6999      	ldr	r1, [r3, #24]
     f2e:	2202      	movs	r2, #2
     f30:	430a      	orrs	r2, r1
     f32:	619a      	str	r2, [r3, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     f34:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
     f36:	e030      	b.n	f9a <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     f38:	4b19      	ldr	r3, [pc, #100]	; (fa0 <system_clock_source_enable+0x94>)
     f3a:	8a19      	ldrh	r1, [r3, #16]
     f3c:	2202      	movs	r2, #2
     f3e:	430a      	orrs	r2, r1
     f40:	821a      	strh	r2, [r3, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     f42:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
     f44:	e029      	b.n	f9a <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     f46:	4b16      	ldr	r3, [pc, #88]	; (fa0 <system_clock_source_enable+0x94>)
     f48:	8a99      	ldrh	r1, [r3, #20]
     f4a:	2202      	movs	r2, #2
     f4c:	430a      	orrs	r2, r1
     f4e:	829a      	strh	r2, [r3, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     f50:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
     f52:	e022      	b.n	f9a <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     f54:	4b13      	ldr	r3, [pc, #76]	; (fa4 <system_clock_source_enable+0x98>)
     f56:	6819      	ldr	r1, [r3, #0]
     f58:	2202      	movs	r2, #2
     f5a:	430a      	orrs	r2, r1
     f5c:	601a      	str	r2, [r3, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     f5e:	681a      	ldr	r2, [r3, #0]
     f60:	4b11      	ldr	r3, [pc, #68]	; (fa8 <system_clock_source_enable+0x9c>)
     f62:	401a      	ands	r2, r3
     f64:	4b0e      	ldr	r3, [pc, #56]	; (fa0 <system_clock_source_enable+0x94>)
     f66:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     f68:	1c19      	adds	r1, r3, #0
     f6a:	2210      	movs	r2, #16
     f6c:	68cb      	ldr	r3, [r1, #12]
     f6e:	421a      	tst	r2, r3
     f70:	d0fc      	beq.n	f6c <system_clock_source_enable+0x60>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     f72:	4a0c      	ldr	r2, [pc, #48]	; (fa4 <system_clock_source_enable+0x98>)
     f74:	6891      	ldr	r1, [r2, #8]
     f76:	4b0a      	ldr	r3, [pc, #40]	; (fa0 <system_clock_source_enable+0x94>)
     f78:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     f7a:	6851      	ldr	r1, [r2, #4]
     f7c:	6299      	str	r1, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     f7e:	6812      	ldr	r2, [r2, #0]
     f80:	b292      	uxth	r2, r2
     f82:	849a      	strh	r2, [r3, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     f84:	2000      	movs	r0, #0
     f86:	e008      	b.n	f9a <system_clock_source_enable+0x8e>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     f88:	4a05      	ldr	r2, [pc, #20]	; (fa0 <system_clock_source_enable+0x94>)
     f8a:	2344      	movs	r3, #68	; 0x44
     f8c:	5cd0      	ldrb	r0, [r2, r3]
     f8e:	2102      	movs	r1, #2
     f90:	4301      	orrs	r1, r0
     f92:	54d1      	strb	r1, [r2, r3]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     f94:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
     f96:	e000      	b.n	f9a <system_clock_source_enable+0x8e>
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     f98:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
     f9a:	4770      	bx	lr
     f9c:	00001a94 	.word	0x00001a94
     fa0:	40000800 	.word	0x40000800
     fa4:	20000074 	.word	0x20000074
     fa8:	0000ff7f 	.word	0x0000ff7f

00000fac <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     fac:	b530      	push	{r4, r5, lr}
     fae:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     fb0:	22c2      	movs	r2, #194	; 0xc2
     fb2:	00d2      	lsls	r2, r2, #3
     fb4:	4b1a      	ldr	r3, [pc, #104]	; (1020 <system_clock_init+0x74>)
     fb6:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     fb8:	4b1a      	ldr	r3, [pc, #104]	; (1024 <system_clock_init+0x78>)
     fba:	685a      	ldr	r2, [r3, #4]
     fbc:	211e      	movs	r1, #30
     fbe:	438a      	bics	r2, r1
     fc0:	605a      	str	r2, [r3, #4]
{
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
     fc2:	2301      	movs	r3, #1
     fc4:	466a      	mov	r2, sp
     fc6:	7013      	strb	r3, [r2, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     fc8:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     fca:	4d17      	ldr	r5, [pc, #92]	; (1028 <system_clock_init+0x7c>)
     fcc:	b2e0      	uxtb	r0, r4
     fce:	4669      	mov	r1, sp
     fd0:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     fd2:	3401      	adds	r4, #1
     fd4:	2c25      	cmp	r4, #37	; 0x25
     fd6:	d1f9      	bne.n	fcc <system_clock_init+0x20>
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
     fd8:	a803      	add	r0, sp, #12
     fda:	2400      	movs	r4, #0
     fdc:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
     fde:	2501      	movs	r5, #1
     fe0:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     fe2:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     fe4:	4b11      	ldr	r3, [pc, #68]	; (102c <system_clock_init+0x80>)
     fe6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     fe8:	2006      	movs	r0, #6
     fea:	4b11      	ldr	r3, [pc, #68]	; (1030 <system_clock_init+0x84>)
     fec:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     fee:	4b11      	ldr	r3, [pc, #68]	; (1034 <system_clock_init+0x88>)
     ff0:	4798      	blx	r3
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
     ff2:	4b11      	ldr	r3, [pc, #68]	; (1038 <system_clock_init+0x8c>)
     ff4:	721c      	strb	r4, [r3, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
     ff6:	725c      	strb	r4, [r3, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
     ff8:	729c      	strb	r4, [r3, #10]
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
     ffa:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     ffc:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
     ffe:	466b      	mov	r3, sp
    1000:	705c      	strb	r4, [r3, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1002:	2306      	movs	r3, #6
    1004:	466a      	mov	r2, sp
    1006:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    1008:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    100a:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    100c:	2000      	movs	r0, #0
    100e:	4669      	mov	r1, sp
    1010:	4b0a      	ldr	r3, [pc, #40]	; (103c <system_clock_init+0x90>)
    1012:	4798      	blx	r3
    1014:	2000      	movs	r0, #0
    1016:	4b0a      	ldr	r3, [pc, #40]	; (1040 <system_clock_init+0x94>)
    1018:	4798      	blx	r3
#endif
}
    101a:	b005      	add	sp, #20
    101c:	bd30      	pop	{r4, r5, pc}
    101e:	46c0      	nop			; (mov r8, r8)
    1020:	40000800 	.word	0x40000800
    1024:	41004000 	.word	0x41004000
    1028:	00001279 	.word	0x00001279
    102c:	00000ed1 	.word	0x00000ed1
    1030:	00000f0d 	.word	0x00000f0d
    1034:	00001045 	.word	0x00001045
    1038:	40000400 	.word	0x40000400
    103c:	00001069 	.word	0x00001069
    1040:	0000111d 	.word	0x0000111d

00001044 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1044:	4b06      	ldr	r3, [pc, #24]	; (1060 <system_gclk_init+0x1c>)
    1046:	6999      	ldr	r1, [r3, #24]
    1048:	2208      	movs	r2, #8
    104a:	430a      	orrs	r2, r1
    104c:	619a      	str	r2, [r3, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    104e:	2201      	movs	r2, #1
    1050:	4b04      	ldr	r3, [pc, #16]	; (1064 <system_gclk_init+0x20>)
    1052:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1054:	1c19      	adds	r1, r3, #0
    1056:	780b      	ldrb	r3, [r1, #0]
    1058:	4213      	tst	r3, r2
    105a:	d1fc      	bne.n	1056 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    105c:	4770      	bx	lr
    105e:	46c0      	nop			; (mov r8, r8)
    1060:	40000400 	.word	0x40000400
    1064:	40000c00 	.word	0x40000c00

00001068 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    106a:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    106c:	1c07      	adds	r7, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    106e:	780d      	ldrb	r5, [r1, #0]
    1070:	022d      	lsls	r5, r5, #8
    1072:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1074:	784b      	ldrb	r3, [r1, #1]
    1076:	2b00      	cmp	r3, #0
    1078:	d002      	beq.n	1080 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    107a:	2380      	movs	r3, #128	; 0x80
    107c:	02db      	lsls	r3, r3, #11
    107e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1080:	7a4b      	ldrb	r3, [r1, #9]
    1082:	2b00      	cmp	r3, #0
    1084:	d002      	beq.n	108c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1086:	2380      	movs	r3, #128	; 0x80
    1088:	031b      	lsls	r3, r3, #12
    108a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    108c:	684c      	ldr	r4, [r1, #4]
    108e:	2c01      	cmp	r4, #1
    1090:	d917      	bls.n	10c2 <system_gclk_gen_set_config+0x5a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1092:	1e63      	subs	r3, r4, #1
    1094:	421c      	tst	r4, r3
    1096:	d10f      	bne.n	10b8 <system_gclk_gen_set_config+0x50>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1098:	2c02      	cmp	r4, #2
    109a:	d906      	bls.n	10aa <system_gclk_gen_set_config+0x42>
    109c:	2302      	movs	r3, #2
    109e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    10a0:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    10a2:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    10a4:	429c      	cmp	r4, r3
    10a6:	d8fb      	bhi.n	10a0 <system_gclk_gen_set_config+0x38>
    10a8:	e000      	b.n	10ac <system_gclk_gen_set_config+0x44>
    10aa:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    10ac:	0217      	lsls	r7, r2, #8
    10ae:	4337      	orrs	r7, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    10b0:	2380      	movs	r3, #128	; 0x80
    10b2:	035b      	lsls	r3, r3, #13
    10b4:	431d      	orrs	r5, r3
    10b6:	e004      	b.n	10c2 <system_gclk_gen_set_config+0x5a>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    10b8:	0227      	lsls	r7, r4, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    10ba:	4337      	orrs	r7, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    10bc:	2380      	movs	r3, #128	; 0x80
    10be:	029b      	lsls	r3, r3, #10
    10c0:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    10c2:	7a0b      	ldrb	r3, [r1, #8]
    10c4:	2b00      	cmp	r3, #0
    10c6:	d002      	beq.n	10ce <system_gclk_gen_set_config+0x66>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    10c8:	2380      	movs	r3, #128	; 0x80
    10ca:	039b      	lsls	r3, r3, #14
    10cc:	431d      	orrs	r5, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    10ce:	4a0f      	ldr	r2, [pc, #60]	; (110c <system_gclk_gen_set_config+0xa4>)
    10d0:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    10d2:	b25b      	sxtb	r3, r3
    10d4:	2b00      	cmp	r3, #0
    10d6:	dbfb      	blt.n	10d0 <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    10d8:	4b0d      	ldr	r3, [pc, #52]	; (1110 <system_gclk_gen_set_config+0xa8>)
    10da:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    10dc:	4b0d      	ldr	r3, [pc, #52]	; (1114 <system_gclk_gen_set_config+0xac>)
    10de:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    10e0:	4a0a      	ldr	r2, [pc, #40]	; (110c <system_gclk_gen_set_config+0xa4>)
    10e2:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    10e4:	b25b      	sxtb	r3, r3
    10e6:	2b00      	cmp	r3, #0
    10e8:	dbfb      	blt.n	10e2 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    10ea:	4b08      	ldr	r3, [pc, #32]	; (110c <system_gclk_gen_set_config+0xa4>)
    10ec:	609f      	str	r7, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    10ee:	1c1a      	adds	r2, r3, #0
    10f0:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    10f2:	b25b      	sxtb	r3, r3
    10f4:	2b00      	cmp	r3, #0
    10f6:	dbfb      	blt.n	10f0 <system_gclk_gen_set_config+0x88>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    10f8:	4b04      	ldr	r3, [pc, #16]	; (110c <system_gclk_gen_set_config+0xa4>)
    10fa:	6859      	ldr	r1, [r3, #4]
    10fc:	2280      	movs	r2, #128	; 0x80
    10fe:	0252      	lsls	r2, r2, #9
    1100:	400a      	ands	r2, r1
    1102:	4315      	orrs	r5, r2
    1104:	605d      	str	r5, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1106:	4b04      	ldr	r3, [pc, #16]	; (1118 <system_gclk_gen_set_config+0xb0>)
    1108:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    110a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    110c:	40000c00 	.word	0x40000c00
    1110:	000005e5 	.word	0x000005e5
    1114:	40000c08 	.word	0x40000c08
    1118:	00000625 	.word	0x00000625

0000111c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    111c:	b510      	push	{r4, lr}
    111e:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1120:	4a0b      	ldr	r2, [pc, #44]	; (1150 <system_gclk_gen_enable+0x34>)
    1122:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    1124:	b25b      	sxtb	r3, r3
    1126:	2b00      	cmp	r3, #0
    1128:	dbfb      	blt.n	1122 <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    112a:	4b0a      	ldr	r3, [pc, #40]	; (1154 <system_gclk_gen_enable+0x38>)
    112c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    112e:	4b0a      	ldr	r3, [pc, #40]	; (1158 <system_gclk_gen_enable+0x3c>)
    1130:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1132:	4a07      	ldr	r2, [pc, #28]	; (1150 <system_gclk_gen_enable+0x34>)
    1134:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    1136:	b25b      	sxtb	r3, r3
    1138:	2b00      	cmp	r3, #0
    113a:	dbfb      	blt.n	1134 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    113c:	4b04      	ldr	r3, [pc, #16]	; (1150 <system_gclk_gen_enable+0x34>)
    113e:	6859      	ldr	r1, [r3, #4]
    1140:	2280      	movs	r2, #128	; 0x80
    1142:	0252      	lsls	r2, r2, #9
    1144:	430a      	orrs	r2, r1
    1146:	605a      	str	r2, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1148:	4b04      	ldr	r3, [pc, #16]	; (115c <system_gclk_gen_enable+0x40>)
    114a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    114c:	bd10      	pop	{r4, pc}
    114e:	46c0      	nop			; (mov r8, r8)
    1150:	40000c00 	.word	0x40000c00
    1154:	000005e5 	.word	0x000005e5
    1158:	40000c04 	.word	0x40000c04
    115c:	00000625 	.word	0x00000625

00001160 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1160:	b570      	push	{r4, r5, r6, lr}
    1162:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1164:	4a1a      	ldr	r2, [pc, #104]	; (11d0 <system_gclk_gen_get_hz+0x70>)
    1166:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    1168:	b25b      	sxtb	r3, r3
    116a:	2b00      	cmp	r3, #0
    116c:	dbfb      	blt.n	1166 <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    116e:	4b19      	ldr	r3, [pc, #100]	; (11d4 <system_gclk_gen_get_hz+0x74>)
    1170:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1172:	4b19      	ldr	r3, [pc, #100]	; (11d8 <system_gclk_gen_get_hz+0x78>)
    1174:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1176:	4a16      	ldr	r2, [pc, #88]	; (11d0 <system_gclk_gen_get_hz+0x70>)
    1178:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    117a:	b25b      	sxtb	r3, r3
    117c:	2b00      	cmp	r3, #0
    117e:	dbfb      	blt.n	1178 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1180:	4e13      	ldr	r6, [pc, #76]	; (11d0 <system_gclk_gen_get_hz+0x70>)
    1182:	6870      	ldr	r0, [r6, #4]
    1184:	04c0      	lsls	r0, r0, #19
    1186:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1188:	4b14      	ldr	r3, [pc, #80]	; (11dc <system_gclk_gen_get_hz+0x7c>)
    118a:	4798      	blx	r3
    118c:	1c05      	adds	r5, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    118e:	4b12      	ldr	r3, [pc, #72]	; (11d8 <system_gclk_gen_get_hz+0x78>)
    1190:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1192:	6876      	ldr	r6, [r6, #4]
    1194:	02f6      	lsls	r6, r6, #11
    1196:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1198:	4b11      	ldr	r3, [pc, #68]	; (11e0 <system_gclk_gen_get_hz+0x80>)
    119a:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    119c:	4a0c      	ldr	r2, [pc, #48]	; (11d0 <system_gclk_gen_get_hz+0x70>)
    119e:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    11a0:	b25b      	sxtb	r3, r3
    11a2:	2b00      	cmp	r3, #0
    11a4:	dbfb      	blt.n	119e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    11a6:	4b0a      	ldr	r3, [pc, #40]	; (11d0 <system_gclk_gen_get_hz+0x70>)
    11a8:	689c      	ldr	r4, [r3, #8]
    11aa:	0a24      	lsrs	r4, r4, #8
    11ac:	b2a4      	uxth	r4, r4
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    11ae:	4b0d      	ldr	r3, [pc, #52]	; (11e4 <system_gclk_gen_get_hz+0x84>)
    11b0:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    11b2:	2e00      	cmp	r6, #0
    11b4:	d107      	bne.n	11c6 <system_gclk_gen_get_hz+0x66>
    11b6:	2c01      	cmp	r4, #1
    11b8:	d907      	bls.n	11ca <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    11ba:	1c28      	adds	r0, r5, #0
    11bc:	1c21      	adds	r1, r4, #0
    11be:	4b0a      	ldr	r3, [pc, #40]	; (11e8 <system_gclk_gen_get_hz+0x88>)
    11c0:	4798      	blx	r3
    11c2:	1c05      	adds	r5, r0, #0
    11c4:	e001      	b.n	11ca <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    11c6:	3401      	adds	r4, #1
    11c8:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    11ca:	1c28      	adds	r0, r5, #0
    11cc:	bd70      	pop	{r4, r5, r6, pc}
    11ce:	46c0      	nop			; (mov r8, r8)
    11d0:	40000c00 	.word	0x40000c00
    11d4:	000005e5 	.word	0x000005e5
    11d8:	40000c04 	.word	0x40000c04
    11dc:	00000e41 	.word	0x00000e41
    11e0:	40000c08 	.word	0x40000c08
    11e4:	00000625 	.word	0x00000625
    11e8:	00001655 	.word	0x00001655

000011ec <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    11ec:	b510      	push	{r4, lr}
    11ee:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    11f0:	4b06      	ldr	r3, [pc, #24]	; (120c <system_gclk_chan_enable+0x20>)
    11f2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    11f4:	4b06      	ldr	r3, [pc, #24]	; (1210 <system_gclk_chan_enable+0x24>)
    11f6:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    11f8:	4b06      	ldr	r3, [pc, #24]	; (1214 <system_gclk_chan_enable+0x28>)
    11fa:	8859      	ldrh	r1, [r3, #2]
    11fc:	2280      	movs	r2, #128	; 0x80
    11fe:	01d2      	lsls	r2, r2, #7
    1200:	430a      	orrs	r2, r1
    1202:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1204:	4b04      	ldr	r3, [pc, #16]	; (1218 <system_gclk_chan_enable+0x2c>)
    1206:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1208:	bd10      	pop	{r4, pc}
    120a:	46c0      	nop			; (mov r8, r8)
    120c:	000005e5 	.word	0x000005e5
    1210:	40000c02 	.word	0x40000c02
    1214:	40000c00 	.word	0x40000c00
    1218:	00000625 	.word	0x00000625

0000121c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    121c:	b510      	push	{r4, lr}
    121e:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1220:	4b0f      	ldr	r3, [pc, #60]	; (1260 <system_gclk_chan_disable+0x44>)
    1222:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1224:	4b0f      	ldr	r3, [pc, #60]	; (1264 <system_gclk_chan_disable+0x48>)
    1226:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1228:	4b0f      	ldr	r3, [pc, #60]	; (1268 <system_gclk_chan_disable+0x4c>)
    122a:	8858      	ldrh	r0, [r3, #2]
    122c:	0500      	lsls	r0, r0, #20
    122e:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1230:	8859      	ldrh	r1, [r3, #2]
    1232:	4a0e      	ldr	r2, [pc, #56]	; (126c <system_gclk_chan_disable+0x50>)
    1234:	400a      	ands	r2, r1
    1236:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1238:	8859      	ldrh	r1, [r3, #2]
    123a:	4a0d      	ldr	r2, [pc, #52]	; (1270 <system_gclk_chan_disable+0x54>)
    123c:	400a      	ands	r2, r1
    123e:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1240:	1c19      	adds	r1, r3, #0
    1242:	2280      	movs	r2, #128	; 0x80
    1244:	01d2      	lsls	r2, r2, #7
    1246:	884b      	ldrh	r3, [r1, #2]
    1248:	4213      	tst	r3, r2
    124a:	d1fc      	bne.n	1246 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    124c:	4b06      	ldr	r3, [pc, #24]	; (1268 <system_gclk_chan_disable+0x4c>)
    124e:	0201      	lsls	r1, r0, #8
    1250:	8858      	ldrh	r0, [r3, #2]
    1252:	4a06      	ldr	r2, [pc, #24]	; (126c <system_gclk_chan_disable+0x50>)
    1254:	4002      	ands	r2, r0
    1256:	430a      	orrs	r2, r1
    1258:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    125a:	4b06      	ldr	r3, [pc, #24]	; (1274 <system_gclk_chan_disable+0x58>)
    125c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    125e:	bd10      	pop	{r4, pc}
    1260:	000005e5 	.word	0x000005e5
    1264:	40000c02 	.word	0x40000c02
    1268:	40000c00 	.word	0x40000c00
    126c:	fffff0ff 	.word	0xfffff0ff
    1270:	ffffbfff 	.word	0xffffbfff
    1274:	00000625 	.word	0x00000625

00001278 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    1278:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    127a:	780c      	ldrb	r4, [r1, #0]
    127c:	0224      	lsls	r4, r4, #8
    127e:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    1280:	4b02      	ldr	r3, [pc, #8]	; (128c <system_gclk_chan_set_config+0x14>)
    1282:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1284:	b2a4      	uxth	r4, r4
    1286:	4b02      	ldr	r3, [pc, #8]	; (1290 <system_gclk_chan_set_config+0x18>)
    1288:	805c      	strh	r4, [r3, #2]
}
    128a:	bd10      	pop	{r4, pc}
    128c:	0000121d 	.word	0x0000121d
    1290:	40000c00 	.word	0x40000c00

00001294 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1294:	b510      	push	{r4, lr}
    1296:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1298:	4b06      	ldr	r3, [pc, #24]	; (12b4 <system_gclk_chan_get_hz+0x20>)
    129a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    129c:	4b06      	ldr	r3, [pc, #24]	; (12b8 <system_gclk_chan_get_hz+0x24>)
    129e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    12a0:	4b06      	ldr	r3, [pc, #24]	; (12bc <system_gclk_chan_get_hz+0x28>)
    12a2:	885c      	ldrh	r4, [r3, #2]
    12a4:	0524      	lsls	r4, r4, #20
    12a6:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    12a8:	4b05      	ldr	r3, [pc, #20]	; (12c0 <system_gclk_chan_get_hz+0x2c>)
    12aa:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    12ac:	1c20      	adds	r0, r4, #0
    12ae:	4b05      	ldr	r3, [pc, #20]	; (12c4 <system_gclk_chan_get_hz+0x30>)
    12b0:	4798      	blx	r3
}
    12b2:	bd10      	pop	{r4, pc}
    12b4:	000005e5 	.word	0x000005e5
    12b8:	40000c02 	.word	0x40000c02
    12bc:	40000c00 	.word	0x40000c00
    12c0:	00000625 	.word	0x00000625
    12c4:	00001161 	.word	0x00001161

000012c8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    12c8:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    12ca:	78d3      	ldrb	r3, [r2, #3]
    12cc:	2b00      	cmp	r3, #0
    12ce:	d11e      	bne.n	130e <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    12d0:	7813      	ldrb	r3, [r2, #0]
    12d2:	2b80      	cmp	r3, #128	; 0x80
    12d4:	d004      	beq.n	12e0 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    12d6:	061b      	lsls	r3, r3, #24
    12d8:	2480      	movs	r4, #128	; 0x80
    12da:	0264      	lsls	r4, r4, #9
    12dc:	4323      	orrs	r3, r4
    12de:	e000      	b.n	12e2 <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    12e0:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    12e2:	7854      	ldrb	r4, [r2, #1]
    12e4:	2502      	movs	r5, #2
    12e6:	43ac      	bics	r4, r5
    12e8:	d10a      	bne.n	1300 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    12ea:	7894      	ldrb	r4, [r2, #2]
    12ec:	2c00      	cmp	r4, #0
    12ee:	d103      	bne.n	12f8 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    12f0:	2480      	movs	r4, #128	; 0x80
    12f2:	02a4      	lsls	r4, r4, #10
    12f4:	4323      	orrs	r3, r4
    12f6:	e002      	b.n	12fe <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    12f8:	24c0      	movs	r4, #192	; 0xc0
    12fa:	02e4      	lsls	r4, r4, #11
    12fc:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    12fe:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1300:	7854      	ldrb	r4, [r2, #1]
    1302:	3c01      	subs	r4, #1
    1304:	2c01      	cmp	r4, #1
    1306:	d804      	bhi.n	1312 <_system_pinmux_config+0x4a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1308:	4c11      	ldr	r4, [pc, #68]	; (1350 <_system_pinmux_config+0x88>)
    130a:	4023      	ands	r3, r4
    130c:	e001      	b.n	1312 <_system_pinmux_config+0x4a>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    130e:	6041      	str	r1, [r0, #4]
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1310:	2300      	movs	r3, #0
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1312:	040d      	lsls	r5, r1, #16
    1314:	0c2d      	lsrs	r5, r5, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1316:	24a0      	movs	r4, #160	; 0xa0
    1318:	05e4      	lsls	r4, r4, #23
    131a:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    131c:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    131e:	6284      	str	r4, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1320:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1322:	24d0      	movs	r4, #208	; 0xd0
    1324:	0624      	lsls	r4, r4, #24
    1326:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1328:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    132a:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    132c:	78d4      	ldrb	r4, [r2, #3]
    132e:	2c00      	cmp	r4, #0
    1330:	d10c      	bne.n	134c <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1332:	035c      	lsls	r4, r3, #13
    1334:	d505      	bpl.n	1342 <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1336:	7893      	ldrb	r3, [r2, #2]
    1338:	2b01      	cmp	r3, #1
    133a:	d101      	bne.n	1340 <_system_pinmux_config+0x78>
				port->OUTSET.reg = pin_mask;
    133c:	6181      	str	r1, [r0, #24]
    133e:	e000      	b.n	1342 <_system_pinmux_config+0x7a>
			} else {
				port->OUTCLR.reg = pin_mask;
    1340:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1342:	7853      	ldrb	r3, [r2, #1]
    1344:	3b01      	subs	r3, #1
    1346:	2b01      	cmp	r3, #1
    1348:	d800      	bhi.n	134c <_system_pinmux_config+0x84>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    134a:	6081      	str	r1, [r0, #8]
		}
	}
}
    134c:	bd30      	pop	{r4, r5, pc}
    134e:	46c0      	nop			; (mov r8, r8)
    1350:	fffbffff 	.word	0xfffbffff

00001354 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1354:	b508      	push	{r3, lr}
    1356:	1c03      	adds	r3, r0, #0
    1358:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    135a:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    135c:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    135e:	2900      	cmp	r1, #0
    1360:	d103      	bne.n	136a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1362:	0958      	lsrs	r0, r3, #5
    1364:	01c0      	lsls	r0, r0, #7
    1366:	4904      	ldr	r1, [pc, #16]	; (1378 <system_pinmux_pin_set_config+0x24>)
    1368:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    136a:	211f      	movs	r1, #31
    136c:	400b      	ands	r3, r1
    136e:	2101      	movs	r1, #1
    1370:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    1372:	4b02      	ldr	r3, [pc, #8]	; (137c <system_pinmux_pin_set_config+0x28>)
    1374:	4798      	blx	r3
}
    1376:	bd08      	pop	{r3, pc}
    1378:	41004400 	.word	0x41004400
    137c:	000012c9 	.word	0x000012c9

00001380 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1380:	4770      	bx	lr
    1382:	46c0      	nop			; (mov r8, r8)

00001384 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1384:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1386:	4b04      	ldr	r3, [pc, #16]	; (1398 <system_init+0x14>)
    1388:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    138a:	4b04      	ldr	r3, [pc, #16]	; (139c <system_init+0x18>)
    138c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    138e:	4b04      	ldr	r3, [pc, #16]	; (13a0 <system_init+0x1c>)
    1390:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1392:	4b04      	ldr	r3, [pc, #16]	; (13a4 <system_init+0x20>)
    1394:	4798      	blx	r3
}
    1396:	bd08      	pop	{r3, pc}
    1398:	00000fad 	.word	0x00000fad
    139c:	00000655 	.word	0x00000655
    13a0:	00001381 	.word	0x00001381
    13a4:	00001381 	.word	0x00001381

000013a8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    13a8:	e7fe      	b.n	13a8 <Dummy_Handler>
    13aa:	46c0      	nop			; (mov r8, r8)

000013ac <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    13ac:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    13ae:	4b2c      	ldr	r3, [pc, #176]	; (1460 <Reset_Handler+0xb4>)
    13b0:	4a2c      	ldr	r2, [pc, #176]	; (1464 <Reset_Handler+0xb8>)
    13b2:	429a      	cmp	r2, r3
    13b4:	d003      	beq.n	13be <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    13b6:	4b2c      	ldr	r3, [pc, #176]	; (1468 <Reset_Handler+0xbc>)
    13b8:	4a29      	ldr	r2, [pc, #164]	; (1460 <Reset_Handler+0xb4>)
    13ba:	429a      	cmp	r2, r3
    13bc:	d304      	bcc.n	13c8 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    13be:	4b2b      	ldr	r3, [pc, #172]	; (146c <Reset_Handler+0xc0>)
    13c0:	4a2b      	ldr	r2, [pc, #172]	; (1470 <Reset_Handler+0xc4>)
    13c2:	429a      	cmp	r2, r3
    13c4:	d310      	bcc.n	13e8 <Reset_Handler+0x3c>
    13c6:	e01b      	b.n	1400 <Reset_Handler+0x54>
    13c8:	4b2a      	ldr	r3, [pc, #168]	; (1474 <Reset_Handler+0xc8>)
    13ca:	4827      	ldr	r0, [pc, #156]	; (1468 <Reset_Handler+0xbc>)
    13cc:	3003      	adds	r0, #3
    13ce:	1ac0      	subs	r0, r0, r3
    13d0:	0880      	lsrs	r0, r0, #2
    13d2:	3001      	adds	r0, #1
    13d4:	0080      	lsls	r0, r0, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    13d6:	2300      	movs	r3, #0
                        *pDest++ = *pSrc++;
    13d8:	4921      	ldr	r1, [pc, #132]	; (1460 <Reset_Handler+0xb4>)
    13da:	4a22      	ldr	r2, [pc, #136]	; (1464 <Reset_Handler+0xb8>)
    13dc:	58d4      	ldr	r4, [r2, r3]
    13de:	50cc      	str	r4, [r1, r3]
    13e0:	3304      	adds	r3, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    13e2:	4283      	cmp	r3, r0
    13e4:	d1fa      	bne.n	13dc <Reset_Handler+0x30>
    13e6:	e7ea      	b.n	13be <Reset_Handler+0x12>
    13e8:	4b21      	ldr	r3, [pc, #132]	; (1470 <Reset_Handler+0xc4>)
    13ea:	1d1a      	adds	r2, r3, #4
    13ec:	491f      	ldr	r1, [pc, #124]	; (146c <Reset_Handler+0xc0>)
    13ee:	3103      	adds	r1, #3
    13f0:	1a89      	subs	r1, r1, r2
    13f2:	0889      	lsrs	r1, r1, #2
    13f4:	0089      	lsls	r1, r1, #2
    13f6:	1852      	adds	r2, r2, r1
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
                *pDest++ = 0;
    13f8:	2100      	movs	r1, #0
    13fa:	c302      	stmia	r3!, {r1}
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    13fc:	4293      	cmp	r3, r2
    13fe:	d1fc      	bne.n	13fa <Reset_Handler+0x4e>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1400:	4b1d      	ldr	r3, [pc, #116]	; (1478 <Reset_Handler+0xcc>)
    1402:	21ff      	movs	r1, #255	; 0xff
    1404:	4a1d      	ldr	r2, [pc, #116]	; (147c <Reset_Handler+0xd0>)
    1406:	438a      	bics	r2, r1
    1408:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    140a:	2102      	movs	r1, #2
    140c:	2390      	movs	r3, #144	; 0x90
    140e:	005b      	lsls	r3, r3, #1
    1410:	4a1b      	ldr	r2, [pc, #108]	; (1480 <Reset_Handler+0xd4>)
    1412:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1414:	4b1b      	ldr	r3, [pc, #108]	; (1484 <Reset_Handler+0xd8>)
    1416:	78d8      	ldrb	r0, [r3, #3]
    1418:	2103      	movs	r1, #3
    141a:	4388      	bics	r0, r1
    141c:	2202      	movs	r2, #2
    141e:	4310      	orrs	r0, r2
    1420:	70d8      	strb	r0, [r3, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1422:	78dd      	ldrb	r5, [r3, #3]
    1424:	240c      	movs	r4, #12
    1426:	43a5      	bics	r5, r4
    1428:	2008      	movs	r0, #8
    142a:	4305      	orrs	r5, r0
    142c:	70dd      	strb	r5, [r3, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    142e:	4b16      	ldr	r3, [pc, #88]	; (1488 <Reset_Handler+0xdc>)
    1430:	7b9e      	ldrb	r6, [r3, #14]
    1432:	2530      	movs	r5, #48	; 0x30
    1434:	43ae      	bics	r6, r5
    1436:	2520      	movs	r5, #32
    1438:	4335      	orrs	r5, r6
    143a:	739d      	strb	r5, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    143c:	7b9d      	ldrb	r5, [r3, #14]
    143e:	43a5      	bics	r5, r4
    1440:	4328      	orrs	r0, r5
    1442:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1444:	7b98      	ldrb	r0, [r3, #14]
    1446:	4388      	bics	r0, r1
    1448:	4302      	orrs	r2, r0
    144a:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    144c:	4b0f      	ldr	r3, [pc, #60]	; (148c <Reset_Handler+0xe0>)
    144e:	6859      	ldr	r1, [r3, #4]
    1450:	2280      	movs	r2, #128	; 0x80
    1452:	430a      	orrs	r2, r1
    1454:	605a      	str	r2, [r3, #4]

        /* Initialize the C library */
        __libc_init_array();
    1456:	4b0e      	ldr	r3, [pc, #56]	; (1490 <Reset_Handler+0xe4>)
    1458:	4798      	blx	r3

        /* Branch to main function */
        main();
    145a:	4b0e      	ldr	r3, [pc, #56]	; (1494 <Reset_Handler+0xe8>)
    145c:	4798      	blx	r3
    145e:	e7fe      	b.n	145e <Reset_Handler+0xb2>
    1460:	20000000 	.word	0x20000000
    1464:	00001b9c 	.word	0x00001b9c
    1468:	2000000c 	.word	0x2000000c
    146c:	20000098 	.word	0x20000098
    1470:	2000000c 	.word	0x2000000c
    1474:	20000004 	.word	0x20000004
    1478:	e000ed00 	.word	0xe000ed00
    147c:	00000000 	.word	0x00000000
    1480:	41007000 	.word	0x41007000
    1484:	41005000 	.word	0x41005000
    1488:	41004800 	.word	0x41004800
    148c:	41004000 	.word	0x41004000
    1490:	00001a09 	.word	0x00001a09
    1494:	00001499 	.word	0x00001499

00001498 <main>:
#include <asf.h>
#include <debug_serial.h>


int main(void)
{
    1498:	b5f0      	push	{r4, r5, r6, r7, lr}
    149a:	4647      	mov	r7, r8
    149c:	b480      	push	{r7}
	system_init();
    149e:	4b4b      	ldr	r3, [pc, #300]	; (15cc <main+0x134>)
    14a0:	4798      	blx	r3
	delay_init();
    14a2:	4b4b      	ldr	r3, [pc, #300]	; (15d0 <main+0x138>)
    14a4:	4798      	blx	r3
	

	configure_debug_serial();
    14a6:	4c4b      	ldr	r4, [pc, #300]	; (15d4 <main+0x13c>)
    14a8:	47a0      	blx	r4
	
	
	configure_debug_serial();
    14aa:	47a0      	blx	r4
	println("hello world");
    14ac:	484a      	ldr	r0, [pc, #296]	; (15d8 <main+0x140>)
    14ae:	4b4b      	ldr	r3, [pc, #300]	; (15dc <main+0x144>)
    14b0:	4798      	blx	r3
    14b2:	2510      	movs	r5, #16

	for (uint16_t i = 1; i != 0; i=i<<1)
    14b4:	2401      	movs	r4, #1
	{
		printlnnum(i);
    14b6:	4f4a      	ldr	r7, [pc, #296]	; (15e0 <main+0x148>)
		delay_ms(100);
    14b8:	4e4a      	ldr	r6, [pc, #296]	; (15e4 <main+0x14c>)
	configure_debug_serial();
	println("hello world");

	for (uint16_t i = 1; i != 0; i=i<<1)
	{
		printlnnum(i);
    14ba:	1c20      	adds	r0, r4, #0
    14bc:	47b8      	blx	r7
		delay_ms(100);
    14be:	2064      	movs	r0, #100	; 0x64
    14c0:	47b0      	blx	r6
	
	
	configure_debug_serial();
	println("hello world");

	for (uint16_t i = 1; i != 0; i=i<<1)
    14c2:	0064      	lsls	r4, r4, #1
    14c4:	b2a4      	uxth	r4, r4
    14c6:	3d01      	subs	r5, #1
    14c8:	2d00      	cmp	r5, #0
    14ca:	d1f6      	bne.n	14ba <main+0x22>
    14cc:	2410      	movs	r4, #16
    14ce:	2501      	movs	r5, #1

	}
	
	for (int16_t i = 1; i != 0; i=i<<1)
	{
		printnum(i);
    14d0:	4b45      	ldr	r3, [pc, #276]	; (15e8 <main+0x150>)
    14d2:	4698      	mov	r8, r3
		print(", ");
    14d4:	4f45      	ldr	r7, [pc, #276]	; (15ec <main+0x154>)
    14d6:	4e46      	ldr	r6, [pc, #280]	; (15f0 <main+0x158>)

	}
	
	for (int16_t i = 1; i != 0; i=i<<1)
	{
		printnum(i);
    14d8:	b22d      	sxth	r5, r5
    14da:	1c28      	adds	r0, r5, #0
    14dc:	47c0      	blx	r8
		print(", ");
    14de:	1c38      	adds	r0, r7, #0
    14e0:	47b0      	blx	r6
		delay_ms(100);
    14e2:	2064      	movs	r0, #100	; 0x64
    14e4:	4b3f      	ldr	r3, [pc, #252]	; (15e4 <main+0x14c>)
    14e6:	4798      	blx	r3
		printlnnum(i);
		delay_ms(100);

	}
	
	for (int16_t i = 1; i != 0; i=i<<1)
    14e8:	006d      	lsls	r5, r5, #1
    14ea:	b2ad      	uxth	r5, r5
    14ec:	3c01      	subs	r4, #1
    14ee:	2c00      	cmp	r4, #0
    14f0:	d1f2      	bne.n	14d8 <main+0x40>
		print(", ");
		delay_ms(100);

	}
	
	println("");
    14f2:	4840      	ldr	r0, [pc, #256]	; (15f4 <main+0x15c>)
    14f4:	4b39      	ldr	r3, [pc, #228]	; (15dc <main+0x144>)
    14f6:	4798      	blx	r3
    14f8:	2520      	movs	r5, #32
	
	for (long i = 1; i != 0; i=i<<1)
    14fa:	2401      	movs	r4, #1
	{
		printlnnum(i);
    14fc:	4f38      	ldr	r7, [pc, #224]	; (15e0 <main+0x148>)
		delay_ms(100);
    14fe:	4e39      	ldr	r6, [pc, #228]	; (15e4 <main+0x14c>)
	
	println("");
	
	for (long i = 1; i != 0; i=i<<1)
	{
		printlnnum(i);
    1500:	1c20      	adds	r0, r4, #0
    1502:	47b8      	blx	r7
		delay_ms(100);
    1504:	2064      	movs	r0, #100	; 0x64
    1506:	47b0      	blx	r6

	}
	
	println("");
	
	for (long i = 1; i != 0; i=i<<1)
    1508:	0064      	lsls	r4, r4, #1
    150a:	3d01      	subs	r5, #1
    150c:	2d00      	cmp	r5, #0
    150e:	d1f7      	bne.n	1500 <main+0x68>
    1510:	e00a      	b.n	1528 <main+0x90>
		printlnnum(i);
		delay_ms(100);

	}
	
	for (uint16_t i = 1; i<= 0xFFFF; i = i*2+1)
    1512:	0064      	lsls	r4, r4, #1
    1514:	3401      	adds	r4, #1
    1516:	b2a4      	uxth	r4, r4
	{
		printlnbin(i);
    1518:	1c20      	adds	r0, r4, #0
    151a:	47b8      	blx	r7
		delay_ms(100);
    151c:	2064      	movs	r0, #100	; 0x64
    151e:	47b0      	blx	r6
    1520:	3d01      	subs	r5, #1
		if (i >= 0xFFFF) break;
    1522:	2d00      	cmp	r5, #0
    1524:	d1f5      	bne.n	1512 <main+0x7a>
    1526:	e00a      	b.n	153e <main+0xa6>

	}
	
	for (uint16_t i = 1; i<= 0xFFFF; i = i*2+1)
	{
		printlnbin(i);
    1528:	2001      	movs	r0, #1
    152a:	4b33      	ldr	r3, [pc, #204]	; (15f8 <main+0x160>)
    152c:	4798      	blx	r3
		delay_ms(100);
    152e:	2064      	movs	r0, #100	; 0x64
    1530:	4b2c      	ldr	r3, [pc, #176]	; (15e4 <main+0x14c>)
    1532:	4798      	blx	r3
    1534:	250f      	movs	r5, #15
    1536:	2401      	movs	r4, #1

	}
	
	for (uint16_t i = 1; i<= 0xFFFF; i = i*2+1)
	{
		printlnbin(i);
    1538:	4f2f      	ldr	r7, [pc, #188]	; (15f8 <main+0x160>)
		delay_ms(100);
    153a:	4e2a      	ldr	r6, [pc, #168]	; (15e4 <main+0x14c>)
    153c:	e7e9      	b.n	1512 <main+0x7a>
		if (i >= 0xFFFF) break;
	}

	println("fun with floats");
    153e:	482f      	ldr	r0, [pc, #188]	; (15fc <main+0x164>)
    1540:	4f26      	ldr	r7, [pc, #152]	; (15dc <main+0x144>)
    1542:	47b8      	blx	r7
	print(" 0.0091->");
    1544:	482e      	ldr	r0, [pc, #184]	; (1600 <main+0x168>)
    1546:	4c2a      	ldr	r4, [pc, #168]	; (15f0 <main+0x158>)
    1548:	47a0      	blx	r4
	printlnflt(0.0091); //this one shouldn't work due to 2 decimal default
    154a:	482e      	ldr	r0, [pc, #184]	; (1604 <main+0x16c>)
    154c:	4d2e      	ldr	r5, [pc, #184]	; (1608 <main+0x170>)
    154e:	47a8      	blx	r5
	print(" ");
    1550:	4e2e      	ldr	r6, [pc, #184]	; (160c <main+0x174>)
    1552:	1c30      	adds	r0, r6, #0
    1554:	47a0      	blx	r4
	print(" 0.091->");
    1556:	482e      	ldr	r0, [pc, #184]	; (1610 <main+0x178>)
    1558:	47a0      	blx	r4
	printlnflt(0.091);
    155a:	482e      	ldr	r0, [pc, #184]	; (1614 <main+0x17c>)
    155c:	47a8      	blx	r5
	print(" ");
    155e:	1c30      	adds	r0, r6, #0
    1560:	47a0      	blx	r4
	print(" 0.91->");
    1562:	482d      	ldr	r0, [pc, #180]	; (1618 <main+0x180>)
    1564:	47a0      	blx	r4
	printlnflt(0.91);
    1566:	482d      	ldr	r0, [pc, #180]	; (161c <main+0x184>)
    1568:	47a8      	blx	r5
	print(" ");
    156a:	1c30      	adds	r0, r6, #0
    156c:	47a0      	blx	r4
	print(" 9.10->");
    156e:	482c      	ldr	r0, [pc, #176]	; (1620 <main+0x188>)
    1570:	47a0      	blx	r4
	printlnflt(9.10);
    1572:	482c      	ldr	r0, [pc, #176]	; (1624 <main+0x18c>)
    1574:	47a8      	blx	r5
	print(" ");
    1576:	1c30      	adds	r0, r6, #0
    1578:	47a0      	blx	r4
	print(" 91.0->");
    157a:	482b      	ldr	r0, [pc, #172]	; (1628 <main+0x190>)
    157c:	47a0      	blx	r4
	printlnflt(91.0);
    157e:	482b      	ldr	r0, [pc, #172]	; (162c <main+0x194>)
    1580:	47a8      	blx	r5
	print(" ");
    1582:	1c30      	adds	r0, r6, #0
    1584:	47a0      	blx	r4
	print(" 910.0->");
    1586:	482a      	ldr	r0, [pc, #168]	; (1630 <main+0x198>)
    1588:	47a0      	blx	r4
	printlnflt(910.0);
    158a:	482a      	ldr	r0, [pc, #168]	; (1634 <main+0x19c>)
    158c:	47a8      	blx	r5
	print(" ");
    158e:	1c30      	adds	r0, r6, #0
    1590:	47a0      	blx	r4
	print(" 9100.0->");
    1592:	4829      	ldr	r0, [pc, #164]	; (1638 <main+0x1a0>)
    1594:	47a0      	blx	r4
	printlnflt(9100.0);
    1596:	4829      	ldr	r0, [pc, #164]	; (163c <main+0x1a4>)
    1598:	47a8      	blx	r5
	print(" ");
    159a:	1c30      	adds	r0, r6, #0
    159c:	47a0      	blx	r4
	print(" 91000.0->");
    159e:	4828      	ldr	r0, [pc, #160]	; (1640 <main+0x1a8>)
    15a0:	47a0      	blx	r4
	printlnflt(91000.0);
    15a2:	4828      	ldr	r0, [pc, #160]	; (1644 <main+0x1ac>)
    15a4:	47a8      	blx	r5
	print(" ");
    15a6:	1c30      	adds	r0, r6, #0
    15a8:	47a0      	blx	r4
	print(" 910000.0->");
    15aa:	4827      	ldr	r0, [pc, #156]	; (1648 <main+0x1b0>)
    15ac:	47a0      	blx	r4
	printlnflt(910000.0);
    15ae:	4827      	ldr	r0, [pc, #156]	; (164c <main+0x1b4>)
    15b0:	47a8      	blx	r5
	println("");
    15b2:	4810      	ldr	r0, [pc, #64]	; (15f4 <main+0x15c>)
    15b4:	47b8      	blx	r7
	
	char bigA = 65;
	char smlL = 108;
	writechar(bigA);
    15b6:	2041      	movs	r0, #65	; 0x41
    15b8:	4c25      	ldr	r4, [pc, #148]	; (1650 <main+0x1b8>)
    15ba:	47a0      	blx	r4
	writechar(smlL);
    15bc:	206c      	movs	r0, #108	; 0x6c
    15be:	47a0      	blx	r4
	writechar(smlL);
    15c0:	206c      	movs	r0, #108	; 0x6c
    15c2:	47a0      	blx	r4
	
	
}
    15c4:	2000      	movs	r0, #0
    15c6:	bc04      	pop	{r2}
    15c8:	4690      	mov	r8, r2
    15ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    15cc:	00001385 	.word	0x00001385
    15d0:	00000111 	.word	0x00000111
    15d4:	00000179 	.word	0x00000179
    15d8:	00001ab8 	.word	0x00001ab8
    15dc:	00000259 	.word	0x00000259
    15e0:	000002e1 	.word	0x000002e1
    15e4:	0000014d 	.word	0x0000014d
    15e8:	000002b9 	.word	0x000002b9
    15ec:	00001ac4 	.word	0x00001ac4
    15f0:	00000219 	.word	0x00000219
    15f4:	00001b14 	.word	0x00001b14
    15f8:	00000491 	.word	0x00000491
    15fc:	00001ac8 	.word	0x00001ac8
    1600:	00001ad8 	.word	0x00001ad8
    1604:	3c15182b 	.word	0x3c15182b
    1608:	00000321 	.word	0x00000321
    160c:	00001ae4 	.word	0x00001ae4
    1610:	00001ae8 	.word	0x00001ae8
    1614:	3dba5e35 	.word	0x3dba5e35
    1618:	00001af4 	.word	0x00001af4
    161c:	3f68f5c3 	.word	0x3f68f5c3
    1620:	00001afc 	.word	0x00001afc
    1624:	4111999a 	.word	0x4111999a
    1628:	00001b04 	.word	0x00001b04
    162c:	42b60000 	.word	0x42b60000
    1630:	00001b0c 	.word	0x00001b0c
    1634:	44638000 	.word	0x44638000
    1638:	00001b18 	.word	0x00001b18
    163c:	460e3000 	.word	0x460e3000
    1640:	00001b24 	.word	0x00001b24
    1644:	47b1bc00 	.word	0x47b1bc00
    1648:	00001b30 	.word	0x00001b30
    164c:	495e2b00 	.word	0x495e2b00
    1650:	000003d9 	.word	0x000003d9

00001654 <__aeabi_uidiv>:
    1654:	2900      	cmp	r1, #0
    1656:	d034      	beq.n	16c2 <.udivsi3_skip_div0_test+0x6a>

00001658 <.udivsi3_skip_div0_test>:
    1658:	2301      	movs	r3, #1
    165a:	2200      	movs	r2, #0
    165c:	b410      	push	{r4}
    165e:	4288      	cmp	r0, r1
    1660:	d32c      	bcc.n	16bc <.udivsi3_skip_div0_test+0x64>
    1662:	2401      	movs	r4, #1
    1664:	0724      	lsls	r4, r4, #28
    1666:	42a1      	cmp	r1, r4
    1668:	d204      	bcs.n	1674 <.udivsi3_skip_div0_test+0x1c>
    166a:	4281      	cmp	r1, r0
    166c:	d202      	bcs.n	1674 <.udivsi3_skip_div0_test+0x1c>
    166e:	0109      	lsls	r1, r1, #4
    1670:	011b      	lsls	r3, r3, #4
    1672:	e7f8      	b.n	1666 <.udivsi3_skip_div0_test+0xe>
    1674:	00e4      	lsls	r4, r4, #3
    1676:	42a1      	cmp	r1, r4
    1678:	d204      	bcs.n	1684 <.udivsi3_skip_div0_test+0x2c>
    167a:	4281      	cmp	r1, r0
    167c:	d202      	bcs.n	1684 <.udivsi3_skip_div0_test+0x2c>
    167e:	0049      	lsls	r1, r1, #1
    1680:	005b      	lsls	r3, r3, #1
    1682:	e7f8      	b.n	1676 <.udivsi3_skip_div0_test+0x1e>
    1684:	4288      	cmp	r0, r1
    1686:	d301      	bcc.n	168c <.udivsi3_skip_div0_test+0x34>
    1688:	1a40      	subs	r0, r0, r1
    168a:	431a      	orrs	r2, r3
    168c:	084c      	lsrs	r4, r1, #1
    168e:	42a0      	cmp	r0, r4
    1690:	d302      	bcc.n	1698 <.udivsi3_skip_div0_test+0x40>
    1692:	1b00      	subs	r0, r0, r4
    1694:	085c      	lsrs	r4, r3, #1
    1696:	4322      	orrs	r2, r4
    1698:	088c      	lsrs	r4, r1, #2
    169a:	42a0      	cmp	r0, r4
    169c:	d302      	bcc.n	16a4 <.udivsi3_skip_div0_test+0x4c>
    169e:	1b00      	subs	r0, r0, r4
    16a0:	089c      	lsrs	r4, r3, #2
    16a2:	4322      	orrs	r2, r4
    16a4:	08cc      	lsrs	r4, r1, #3
    16a6:	42a0      	cmp	r0, r4
    16a8:	d302      	bcc.n	16b0 <.udivsi3_skip_div0_test+0x58>
    16aa:	1b00      	subs	r0, r0, r4
    16ac:	08dc      	lsrs	r4, r3, #3
    16ae:	4322      	orrs	r2, r4
    16b0:	2800      	cmp	r0, #0
    16b2:	d003      	beq.n	16bc <.udivsi3_skip_div0_test+0x64>
    16b4:	091b      	lsrs	r3, r3, #4
    16b6:	d001      	beq.n	16bc <.udivsi3_skip_div0_test+0x64>
    16b8:	0909      	lsrs	r1, r1, #4
    16ba:	e7e3      	b.n	1684 <.udivsi3_skip_div0_test+0x2c>
    16bc:	1c10      	adds	r0, r2, #0
    16be:	bc10      	pop	{r4}
    16c0:	4770      	bx	lr
    16c2:	2800      	cmp	r0, #0
    16c4:	d001      	beq.n	16ca <.udivsi3_skip_div0_test+0x72>
    16c6:	2000      	movs	r0, #0
    16c8:	43c0      	mvns	r0, r0
    16ca:	b407      	push	{r0, r1, r2}
    16cc:	4802      	ldr	r0, [pc, #8]	; (16d8 <.udivsi3_skip_div0_test+0x80>)
    16ce:	a102      	add	r1, pc, #8	; (adr r1, 16d8 <.udivsi3_skip_div0_test+0x80>)
    16d0:	1840      	adds	r0, r0, r1
    16d2:	9002      	str	r0, [sp, #8]
    16d4:	bd03      	pop	{r0, r1, pc}
    16d6:	46c0      	nop			; (mov r8, r8)
    16d8:	00000019 	.word	0x00000019

000016dc <__aeabi_uidivmod>:
    16dc:	2900      	cmp	r1, #0
    16de:	d0f0      	beq.n	16c2 <.udivsi3_skip_div0_test+0x6a>
    16e0:	b503      	push	{r0, r1, lr}
    16e2:	f7ff ffb9 	bl	1658 <.udivsi3_skip_div0_test>
    16e6:	bc0e      	pop	{r1, r2, r3}
    16e8:	4342      	muls	r2, r0
    16ea:	1a89      	subs	r1, r1, r2
    16ec:	4718      	bx	r3
    16ee:	46c0      	nop			; (mov r8, r8)

000016f0 <__aeabi_idiv0>:
    16f0:	4770      	bx	lr
    16f2:	46c0      	nop			; (mov r8, r8)

000016f4 <__aeabi_lmul>:
    16f4:	469c      	mov	ip, r3
    16f6:	0403      	lsls	r3, r0, #16
    16f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    16fa:	0c1b      	lsrs	r3, r3, #16
    16fc:	0417      	lsls	r7, r2, #16
    16fe:	0c3f      	lsrs	r7, r7, #16
    1700:	0c15      	lsrs	r5, r2, #16
    1702:	1c1e      	adds	r6, r3, #0
    1704:	1c04      	adds	r4, r0, #0
    1706:	0c00      	lsrs	r0, r0, #16
    1708:	437e      	muls	r6, r7
    170a:	436b      	muls	r3, r5
    170c:	4347      	muls	r7, r0
    170e:	4345      	muls	r5, r0
    1710:	18fb      	adds	r3, r7, r3
    1712:	0c30      	lsrs	r0, r6, #16
    1714:	1818      	adds	r0, r3, r0
    1716:	4287      	cmp	r7, r0
    1718:	d902      	bls.n	1720 <__aeabi_lmul+0x2c>
    171a:	2380      	movs	r3, #128	; 0x80
    171c:	025b      	lsls	r3, r3, #9
    171e:	18ed      	adds	r5, r5, r3
    1720:	0c03      	lsrs	r3, r0, #16
    1722:	18ed      	adds	r5, r5, r3
    1724:	4663      	mov	r3, ip
    1726:	435c      	muls	r4, r3
    1728:	434a      	muls	r2, r1
    172a:	0436      	lsls	r6, r6, #16
    172c:	0c36      	lsrs	r6, r6, #16
    172e:	18a1      	adds	r1, r4, r2
    1730:	0400      	lsls	r0, r0, #16
    1732:	1980      	adds	r0, r0, r6
    1734:	1949      	adds	r1, r1, r5
    1736:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001738 <__aeabi_fmul>:
    1738:	b5f0      	push	{r4, r5, r6, r7, lr}
    173a:	465f      	mov	r7, fp
    173c:	4656      	mov	r6, sl
    173e:	464d      	mov	r5, r9
    1740:	4644      	mov	r4, r8
    1742:	b4f0      	push	{r4, r5, r6, r7}
    1744:	0244      	lsls	r4, r0, #9
    1746:	0046      	lsls	r6, r0, #1
    1748:	b083      	sub	sp, #12
    174a:	1c0f      	adds	r7, r1, #0
    174c:	0a64      	lsrs	r4, r4, #9
    174e:	0e36      	lsrs	r6, r6, #24
    1750:	0fc5      	lsrs	r5, r0, #31
    1752:	2e00      	cmp	r6, #0
    1754:	d041      	beq.n	17da <__aeabi_fmul+0xa2>
    1756:	2eff      	cmp	r6, #255	; 0xff
    1758:	d022      	beq.n	17a0 <__aeabi_fmul+0x68>
    175a:	2380      	movs	r3, #128	; 0x80
    175c:	041b      	lsls	r3, r3, #16
    175e:	2000      	movs	r0, #0
    1760:	431c      	orrs	r4, r3
    1762:	00e4      	lsls	r4, r4, #3
    1764:	3e7f      	subs	r6, #127	; 0x7f
    1766:	4682      	mov	sl, r0
    1768:	4680      	mov	r8, r0
    176a:	1c39      	adds	r1, r7, #0
    176c:	004b      	lsls	r3, r1, #1
    176e:	027f      	lsls	r7, r7, #9
    1770:	0fc9      	lsrs	r1, r1, #31
    1772:	0a7f      	lsrs	r7, r7, #9
    1774:	0e1b      	lsrs	r3, r3, #24
    1776:	468b      	mov	fp, r1
    1778:	d03b      	beq.n	17f2 <__aeabi_fmul+0xba>
    177a:	2bff      	cmp	r3, #255	; 0xff
    177c:	d034      	beq.n	17e8 <__aeabi_fmul+0xb0>
    177e:	2280      	movs	r2, #128	; 0x80
    1780:	0412      	lsls	r2, r2, #16
    1782:	4317      	orrs	r7, r2
    1784:	00ff      	lsls	r7, r7, #3
    1786:	3b7f      	subs	r3, #127	; 0x7f
    1788:	2100      	movs	r1, #0
    178a:	465a      	mov	r2, fp
    178c:	406a      	eors	r2, r5
    178e:	9201      	str	r2, [sp, #4]
    1790:	4652      	mov	r2, sl
    1792:	430a      	orrs	r2, r1
    1794:	2a0f      	cmp	r2, #15
    1796:	d863      	bhi.n	1860 <__aeabi_fmul+0x128>
    1798:	487a      	ldr	r0, [pc, #488]	; (1984 <__aeabi_fmul+0x24c>)
    179a:	0092      	lsls	r2, r2, #2
    179c:	5882      	ldr	r2, [r0, r2]
    179e:	4697      	mov	pc, r2
    17a0:	2c00      	cmp	r4, #0
    17a2:	d13f      	bne.n	1824 <__aeabi_fmul+0xec>
    17a4:	2208      	movs	r2, #8
    17a6:	2302      	movs	r3, #2
    17a8:	4692      	mov	sl, r2
    17aa:	4698      	mov	r8, r3
    17ac:	e7dd      	b.n	176a <__aeabi_fmul+0x32>
    17ae:	9501      	str	r5, [sp, #4]
    17b0:	4640      	mov	r0, r8
    17b2:	2802      	cmp	r0, #2
    17b4:	d12a      	bne.n	180c <__aeabi_fmul+0xd4>
    17b6:	9a01      	ldr	r2, [sp, #4]
    17b8:	2501      	movs	r5, #1
    17ba:	4015      	ands	r5, r2
    17bc:	23ff      	movs	r3, #255	; 0xff
    17be:	2400      	movs	r4, #0
    17c0:	0264      	lsls	r4, r4, #9
    17c2:	05db      	lsls	r3, r3, #23
    17c4:	0a60      	lsrs	r0, r4, #9
    17c6:	07ed      	lsls	r5, r5, #31
    17c8:	4318      	orrs	r0, r3
    17ca:	4328      	orrs	r0, r5
    17cc:	b003      	add	sp, #12
    17ce:	bc3c      	pop	{r2, r3, r4, r5}
    17d0:	4690      	mov	r8, r2
    17d2:	4699      	mov	r9, r3
    17d4:	46a2      	mov	sl, r4
    17d6:	46ab      	mov	fp, r5
    17d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    17da:	2c00      	cmp	r4, #0
    17dc:	d127      	bne.n	182e <__aeabi_fmul+0xf6>
    17de:	2004      	movs	r0, #4
    17e0:	2201      	movs	r2, #1
    17e2:	4682      	mov	sl, r0
    17e4:	4690      	mov	r8, r2
    17e6:	e7c0      	b.n	176a <__aeabi_fmul+0x32>
    17e8:	1c39      	adds	r1, r7, #0
    17ea:	1e4a      	subs	r2, r1, #1
    17ec:	4191      	sbcs	r1, r2
    17ee:	3102      	adds	r1, #2
    17f0:	e7cb      	b.n	178a <__aeabi_fmul+0x52>
    17f2:	2101      	movs	r1, #1
    17f4:	2f00      	cmp	r7, #0
    17f6:	d0c8      	beq.n	178a <__aeabi_fmul+0x52>
    17f8:	1c38      	adds	r0, r7, #0
    17fa:	f000 f8e7 	bl	19cc <__clzsi2>
    17fe:	1f43      	subs	r3, r0, #5
    1800:	409f      	lsls	r7, r3
    1802:	2376      	movs	r3, #118	; 0x76
    1804:	425b      	negs	r3, r3
    1806:	1a1b      	subs	r3, r3, r0
    1808:	2100      	movs	r1, #0
    180a:	e7be      	b.n	178a <__aeabi_fmul+0x52>
    180c:	2803      	cmp	r0, #3
    180e:	d100      	bne.n	1812 <__aeabi_fmul+0xda>
    1810:	e0ae      	b.n	1970 <__aeabi_fmul+0x238>
    1812:	2801      	cmp	r0, #1
    1814:	d14f      	bne.n	18b6 <__aeabi_fmul+0x17e>
    1816:	9801      	ldr	r0, [sp, #4]
    1818:	4642      	mov	r2, r8
    181a:	4010      	ands	r0, r2
    181c:	b2c5      	uxtb	r5, r0
    181e:	2300      	movs	r3, #0
    1820:	2400      	movs	r4, #0
    1822:	e7cd      	b.n	17c0 <__aeabi_fmul+0x88>
    1824:	230c      	movs	r3, #12
    1826:	2003      	movs	r0, #3
    1828:	469a      	mov	sl, r3
    182a:	4680      	mov	r8, r0
    182c:	e79d      	b.n	176a <__aeabi_fmul+0x32>
    182e:	1c20      	adds	r0, r4, #0
    1830:	f000 f8cc 	bl	19cc <__clzsi2>
    1834:	2676      	movs	r6, #118	; 0x76
    1836:	1f43      	subs	r3, r0, #5
    1838:	409c      	lsls	r4, r3
    183a:	4276      	negs	r6, r6
    183c:	2300      	movs	r3, #0
    183e:	1a36      	subs	r6, r6, r0
    1840:	469a      	mov	sl, r3
    1842:	4698      	mov	r8, r3
    1844:	e791      	b.n	176a <__aeabi_fmul+0x32>
    1846:	2480      	movs	r4, #128	; 0x80
    1848:	2500      	movs	r5, #0
    184a:	03e4      	lsls	r4, r4, #15
    184c:	23ff      	movs	r3, #255	; 0xff
    184e:	e7b7      	b.n	17c0 <__aeabi_fmul+0x88>
    1850:	465b      	mov	r3, fp
    1852:	1c3c      	adds	r4, r7, #0
    1854:	9301      	str	r3, [sp, #4]
    1856:	4688      	mov	r8, r1
    1858:	e7aa      	b.n	17b0 <__aeabi_fmul+0x78>
    185a:	1c3c      	adds	r4, r7, #0
    185c:	4688      	mov	r8, r1
    185e:	e7a7      	b.n	17b0 <__aeabi_fmul+0x78>
    1860:	0c25      	lsrs	r5, r4, #16
    1862:	0424      	lsls	r4, r4, #16
    1864:	0c3a      	lsrs	r2, r7, #16
    1866:	0c24      	lsrs	r4, r4, #16
    1868:	043f      	lsls	r7, r7, #16
    186a:	18f6      	adds	r6, r6, r3
    186c:	0c3f      	lsrs	r7, r7, #16
    186e:	1c21      	adds	r1, r4, #0
    1870:	1c23      	adds	r3, r4, #0
    1872:	4379      	muls	r1, r7
    1874:	4353      	muls	r3, r2
    1876:	436f      	muls	r7, r5
    1878:	4355      	muls	r5, r2
    187a:	18fb      	adds	r3, r7, r3
    187c:	0c0a      	lsrs	r2, r1, #16
    187e:	189b      	adds	r3, r3, r2
    1880:	46b1      	mov	r9, r6
    1882:	429f      	cmp	r7, r3
    1884:	d902      	bls.n	188c <__aeabi_fmul+0x154>
    1886:	2280      	movs	r2, #128	; 0x80
    1888:	0252      	lsls	r2, r2, #9
    188a:	18ad      	adds	r5, r5, r2
    188c:	0409      	lsls	r1, r1, #16
    188e:	041a      	lsls	r2, r3, #16
    1890:	0c09      	lsrs	r1, r1, #16
    1892:	1852      	adds	r2, r2, r1
    1894:	0194      	lsls	r4, r2, #6
    1896:	0c1b      	lsrs	r3, r3, #16
    1898:	1e61      	subs	r1, r4, #1
    189a:	418c      	sbcs	r4, r1
    189c:	0e92      	lsrs	r2, r2, #26
    189e:	18ed      	adds	r5, r5, r3
    18a0:	4314      	orrs	r4, r2
    18a2:	01ad      	lsls	r5, r5, #6
    18a4:	432c      	orrs	r4, r5
    18a6:	0123      	lsls	r3, r4, #4
    18a8:	d505      	bpl.n	18b6 <__aeabi_fmul+0x17e>
    18aa:	2201      	movs	r2, #1
    18ac:	0863      	lsrs	r3, r4, #1
    18ae:	2001      	movs	r0, #1
    18b0:	4014      	ands	r4, r2
    18b2:	4481      	add	r9, r0
    18b4:	431c      	orrs	r4, r3
    18b6:	464b      	mov	r3, r9
    18b8:	337f      	adds	r3, #127	; 0x7f
    18ba:	2b00      	cmp	r3, #0
    18bc:	dd2d      	ble.n	191a <__aeabi_fmul+0x1e2>
    18be:	0760      	lsls	r0, r4, #29
    18c0:	d004      	beq.n	18cc <__aeabi_fmul+0x194>
    18c2:	220f      	movs	r2, #15
    18c4:	4022      	ands	r2, r4
    18c6:	2a04      	cmp	r2, #4
    18c8:	d000      	beq.n	18cc <__aeabi_fmul+0x194>
    18ca:	3404      	adds	r4, #4
    18cc:	0122      	lsls	r2, r4, #4
    18ce:	d503      	bpl.n	18d8 <__aeabi_fmul+0x1a0>
    18d0:	4b2d      	ldr	r3, [pc, #180]	; (1988 <__aeabi_fmul+0x250>)
    18d2:	401c      	ands	r4, r3
    18d4:	464b      	mov	r3, r9
    18d6:	3380      	adds	r3, #128	; 0x80
    18d8:	2bfe      	cmp	r3, #254	; 0xfe
    18da:	dd17      	ble.n	190c <__aeabi_fmul+0x1d4>
    18dc:	9b01      	ldr	r3, [sp, #4]
    18de:	2501      	movs	r5, #1
    18e0:	401d      	ands	r5, r3
    18e2:	2400      	movs	r4, #0
    18e4:	23ff      	movs	r3, #255	; 0xff
    18e6:	e76b      	b.n	17c0 <__aeabi_fmul+0x88>
    18e8:	2080      	movs	r0, #128	; 0x80
    18ea:	03c0      	lsls	r0, r0, #15
    18ec:	4204      	tst	r4, r0
    18ee:	d008      	beq.n	1902 <__aeabi_fmul+0x1ca>
    18f0:	4207      	tst	r7, r0
    18f2:	d106      	bne.n	1902 <__aeabi_fmul+0x1ca>
    18f4:	1c04      	adds	r4, r0, #0
    18f6:	433c      	orrs	r4, r7
    18f8:	0264      	lsls	r4, r4, #9
    18fa:	0a64      	lsrs	r4, r4, #9
    18fc:	465d      	mov	r5, fp
    18fe:	23ff      	movs	r3, #255	; 0xff
    1900:	e75e      	b.n	17c0 <__aeabi_fmul+0x88>
    1902:	4304      	orrs	r4, r0
    1904:	0264      	lsls	r4, r4, #9
    1906:	0a64      	lsrs	r4, r4, #9
    1908:	23ff      	movs	r3, #255	; 0xff
    190a:	e759      	b.n	17c0 <__aeabi_fmul+0x88>
    190c:	9801      	ldr	r0, [sp, #4]
    190e:	01a4      	lsls	r4, r4, #6
    1910:	2501      	movs	r5, #1
    1912:	0a64      	lsrs	r4, r4, #9
    1914:	b2db      	uxtb	r3, r3
    1916:	4005      	ands	r5, r0
    1918:	e752      	b.n	17c0 <__aeabi_fmul+0x88>
    191a:	237e      	movs	r3, #126	; 0x7e
    191c:	425b      	negs	r3, r3
    191e:	464a      	mov	r2, r9
    1920:	1a9b      	subs	r3, r3, r2
    1922:	2b1b      	cmp	r3, #27
    1924:	dd05      	ble.n	1932 <__aeabi_fmul+0x1fa>
    1926:	9b01      	ldr	r3, [sp, #4]
    1928:	2501      	movs	r5, #1
    192a:	401d      	ands	r5, r3
    192c:	2400      	movs	r4, #0
    192e:	2300      	movs	r3, #0
    1930:	e746      	b.n	17c0 <__aeabi_fmul+0x88>
    1932:	1c22      	adds	r2, r4, #0
    1934:	40da      	lsrs	r2, r3
    1936:	464b      	mov	r3, r9
    1938:	339e      	adds	r3, #158	; 0x9e
    193a:	409c      	lsls	r4, r3
    193c:	1c23      	adds	r3, r4, #0
    193e:	1e5c      	subs	r4, r3, #1
    1940:	41a3      	sbcs	r3, r4
    1942:	4313      	orrs	r3, r2
    1944:	0758      	lsls	r0, r3, #29
    1946:	d004      	beq.n	1952 <__aeabi_fmul+0x21a>
    1948:	220f      	movs	r2, #15
    194a:	401a      	ands	r2, r3
    194c:	2a04      	cmp	r2, #4
    194e:	d000      	beq.n	1952 <__aeabi_fmul+0x21a>
    1950:	3304      	adds	r3, #4
    1952:	015a      	lsls	r2, r3, #5
    1954:	d505      	bpl.n	1962 <__aeabi_fmul+0x22a>
    1956:	9b01      	ldr	r3, [sp, #4]
    1958:	2501      	movs	r5, #1
    195a:	401d      	ands	r5, r3
    195c:	2400      	movs	r4, #0
    195e:	2301      	movs	r3, #1
    1960:	e72e      	b.n	17c0 <__aeabi_fmul+0x88>
    1962:	9801      	ldr	r0, [sp, #4]
    1964:	019c      	lsls	r4, r3, #6
    1966:	2501      	movs	r5, #1
    1968:	0a64      	lsrs	r4, r4, #9
    196a:	4005      	ands	r5, r0
    196c:	2300      	movs	r3, #0
    196e:	e727      	b.n	17c0 <__aeabi_fmul+0x88>
    1970:	2780      	movs	r7, #128	; 0x80
    1972:	03ff      	lsls	r7, r7, #15
    1974:	9b01      	ldr	r3, [sp, #4]
    1976:	433c      	orrs	r4, r7
    1978:	0264      	lsls	r4, r4, #9
    197a:	2501      	movs	r5, #1
    197c:	401d      	ands	r5, r3
    197e:	0a64      	lsrs	r4, r4, #9
    1980:	23ff      	movs	r3, #255	; 0xff
    1982:	e71d      	b.n	17c0 <__aeabi_fmul+0x88>
    1984:	00001b3c 	.word	0x00001b3c
    1988:	f7ffffff 	.word	0xf7ffffff

0000198c <__aeabi_f2iz>:
    198c:	0243      	lsls	r3, r0, #9
    198e:	0a59      	lsrs	r1, r3, #9
    1990:	0043      	lsls	r3, r0, #1
    1992:	0fc2      	lsrs	r2, r0, #31
    1994:	0e1b      	lsrs	r3, r3, #24
    1996:	2000      	movs	r0, #0
    1998:	2b7e      	cmp	r3, #126	; 0x7e
    199a:	dd0d      	ble.n	19b8 <__aeabi_f2iz+0x2c>
    199c:	2b9d      	cmp	r3, #157	; 0x9d
    199e:	dc0c      	bgt.n	19ba <__aeabi_f2iz+0x2e>
    19a0:	2080      	movs	r0, #128	; 0x80
    19a2:	0400      	lsls	r0, r0, #16
    19a4:	4301      	orrs	r1, r0
    19a6:	2b95      	cmp	r3, #149	; 0x95
    19a8:	dc0a      	bgt.n	19c0 <__aeabi_f2iz+0x34>
    19aa:	2096      	movs	r0, #150	; 0x96
    19ac:	1ac3      	subs	r3, r0, r3
    19ae:	40d9      	lsrs	r1, r3
    19b0:	4248      	negs	r0, r1
    19b2:	2a00      	cmp	r2, #0
    19b4:	d100      	bne.n	19b8 <__aeabi_f2iz+0x2c>
    19b6:	1c08      	adds	r0, r1, #0
    19b8:	4770      	bx	lr
    19ba:	4b03      	ldr	r3, [pc, #12]	; (19c8 <__aeabi_f2iz+0x3c>)
    19bc:	18d0      	adds	r0, r2, r3
    19be:	e7fb      	b.n	19b8 <__aeabi_f2iz+0x2c>
    19c0:	3b96      	subs	r3, #150	; 0x96
    19c2:	4099      	lsls	r1, r3
    19c4:	e7f4      	b.n	19b0 <__aeabi_f2iz+0x24>
    19c6:	46c0      	nop			; (mov r8, r8)
    19c8:	7fffffff 	.word	0x7fffffff

000019cc <__clzsi2>:
    19cc:	211c      	movs	r1, #28
    19ce:	2301      	movs	r3, #1
    19d0:	041b      	lsls	r3, r3, #16
    19d2:	4298      	cmp	r0, r3
    19d4:	d301      	bcc.n	19da <__clzsi2+0xe>
    19d6:	0c00      	lsrs	r0, r0, #16
    19d8:	3910      	subs	r1, #16
    19da:	0a1b      	lsrs	r3, r3, #8
    19dc:	4298      	cmp	r0, r3
    19de:	d301      	bcc.n	19e4 <__clzsi2+0x18>
    19e0:	0a00      	lsrs	r0, r0, #8
    19e2:	3908      	subs	r1, #8
    19e4:	091b      	lsrs	r3, r3, #4
    19e6:	4298      	cmp	r0, r3
    19e8:	d301      	bcc.n	19ee <__clzsi2+0x22>
    19ea:	0900      	lsrs	r0, r0, #4
    19ec:	3904      	subs	r1, #4
    19ee:	a202      	add	r2, pc, #8	; (adr r2, 19f8 <__clzsi2+0x2c>)
    19f0:	5c10      	ldrb	r0, [r2, r0]
    19f2:	1840      	adds	r0, r0, r1
    19f4:	4770      	bx	lr
    19f6:	46c0      	nop			; (mov r8, r8)
    19f8:	02020304 	.word	0x02020304
    19fc:	01010101 	.word	0x01010101
	...

00001a08 <__libc_init_array>:
    1a08:	b570      	push	{r4, r5, r6, lr}
    1a0a:	4b0e      	ldr	r3, [pc, #56]	; (1a44 <__libc_init_array+0x3c>)
    1a0c:	4d0e      	ldr	r5, [pc, #56]	; (1a48 <__libc_init_array+0x40>)
    1a0e:	2400      	movs	r4, #0
    1a10:	1aed      	subs	r5, r5, r3
    1a12:	10ad      	asrs	r5, r5, #2
    1a14:	1c1e      	adds	r6, r3, #0
    1a16:	42ac      	cmp	r4, r5
    1a18:	d004      	beq.n	1a24 <__libc_init_array+0x1c>
    1a1a:	00a3      	lsls	r3, r4, #2
    1a1c:	58f3      	ldr	r3, [r6, r3]
    1a1e:	4798      	blx	r3
    1a20:	3401      	adds	r4, #1
    1a22:	e7f8      	b.n	1a16 <__libc_init_array+0xe>
    1a24:	f000 f8aa 	bl	1b7c <_init>
    1a28:	4b08      	ldr	r3, [pc, #32]	; (1a4c <__libc_init_array+0x44>)
    1a2a:	4d09      	ldr	r5, [pc, #36]	; (1a50 <__libc_init_array+0x48>)
    1a2c:	2400      	movs	r4, #0
    1a2e:	1aed      	subs	r5, r5, r3
    1a30:	10ad      	asrs	r5, r5, #2
    1a32:	1c1e      	adds	r6, r3, #0
    1a34:	42ac      	cmp	r4, r5
    1a36:	d004      	beq.n	1a42 <__libc_init_array+0x3a>
    1a38:	00a3      	lsls	r3, r4, #2
    1a3a:	58f3      	ldr	r3, [r6, r3]
    1a3c:	4798      	blx	r3
    1a3e:	3401      	adds	r4, #1
    1a40:	e7f8      	b.n	1a34 <__libc_init_array+0x2c>
    1a42:	bd70      	pop	{r4, r5, r6, pc}
    1a44:	00001b88 	.word	0x00001b88
    1a48:	00001b88 	.word	0x00001b88
    1a4c:	00001b88 	.word	0x00001b88
    1a50:	00001b8c 	.word	0x00001b8c
    1a54:	00000a0d 	.word	0x00000a0d
    1a58:	42000800 	.word	0x42000800
    1a5c:	42000c00 	.word	0x42000c00
    1a60:	42001000 	.word	0x42001000
    1a64:	42001400 	.word	0x42001400
    1a68:	42001800 	.word	0x42001800
    1a6c:	42001c00 	.word	0x42001c00
    1a70:	00000e54 	.word	0x00000e54
    1a74:	00000eb0 	.word	0x00000eb0
    1a78:	00000eb0 	.word	0x00000eb0
    1a7c:	00000e4e 	.word	0x00000e4e
    1a80:	00000e4e 	.word	0x00000e4e
    1a84:	00000e6a 	.word	0x00000e6a
    1a88:	00000e5a 	.word	0x00000e5a
    1a8c:	00000e70 	.word	0x00000e70
    1a90:	00000e9e 	.word	0x00000e9e
    1a94:	00000f38 	.word	0x00000f38
    1a98:	00000f98 	.word	0x00000f98
    1a9c:	00000f98 	.word	0x00000f98
    1aa0:	00000f18 	.word	0x00000f18
    1aa4:	00000f2a 	.word	0x00000f2a
    1aa8:	00000f46 	.word	0x00000f46
    1aac:	00000f1c 	.word	0x00000f1c
    1ab0:	00000f54 	.word	0x00000f54
    1ab4:	00000f88 	.word	0x00000f88
    1ab8:	6c6c6568 	.word	0x6c6c6568
    1abc:	6f77206f 	.word	0x6f77206f
    1ac0:	00646c72 	.word	0x00646c72
    1ac4:	0000202c 	.word	0x0000202c
    1ac8:	206e7566 	.word	0x206e7566
    1acc:	68746977 	.word	0x68746977
    1ad0:	6f6c6620 	.word	0x6f6c6620
    1ad4:	00737461 	.word	0x00737461
    1ad8:	302e3020 	.word	0x302e3020
    1adc:	2d313930 	.word	0x2d313930
    1ae0:	0000003e 	.word	0x0000003e
    1ae4:	00000020 	.word	0x00000020
    1ae8:	302e3020 	.word	0x302e3020
    1aec:	3e2d3139 	.word	0x3e2d3139
    1af0:	00000000 	.word	0x00000000
    1af4:	392e3020 	.word	0x392e3020
    1af8:	003e2d31 	.word	0x003e2d31
    1afc:	312e3920 	.word	0x312e3920
    1b00:	003e2d30 	.word	0x003e2d30
    1b04:	2e313920 	.word	0x2e313920
    1b08:	003e2d30 	.word	0x003e2d30
    1b0c:	30313920 	.word	0x30313920
    1b10:	3e2d302e 	.word	0x3e2d302e
    1b14:	00000000 	.word	0x00000000
    1b18:	30313920 	.word	0x30313920
    1b1c:	2d302e30 	.word	0x2d302e30
    1b20:	0000003e 	.word	0x0000003e
    1b24:	30313920 	.word	0x30313920
    1b28:	302e3030 	.word	0x302e3030
    1b2c:	00003e2d 	.word	0x00003e2d
    1b30:	30313920 	.word	0x30313920
    1b34:	2e303030 	.word	0x2e303030
    1b38:	003e2d30 	.word	0x003e2d30
    1b3c:	00001860 	.word	0x00001860
    1b40:	0000185a 	.word	0x0000185a
    1b44:	0000185a 	.word	0x0000185a
    1b48:	00001850 	.word	0x00001850
    1b4c:	000017b0 	.word	0x000017b0
    1b50:	000017b0 	.word	0x000017b0
    1b54:	00001846 	.word	0x00001846
    1b58:	00001850 	.word	0x00001850
    1b5c:	000017b0 	.word	0x000017b0
    1b60:	00001846 	.word	0x00001846
    1b64:	000017b0 	.word	0x000017b0
    1b68:	00001850 	.word	0x00001850
    1b6c:	000017ae 	.word	0x000017ae
    1b70:	000017ae 	.word	0x000017ae
    1b74:	000017ae 	.word	0x000017ae
    1b78:	000018e8 	.word	0x000018e8

00001b7c <_init>:
    1b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b7e:	46c0      	nop			; (mov r8, r8)
    1b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1b82:	bc08      	pop	{r3}
    1b84:	469e      	mov	lr, r3
    1b86:	4770      	bx	lr

00001b88 <__init_array_start>:
    1b88:	000000d9 	.word	0x000000d9

00001b8c <_fini>:
    1b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b8e:	46c0      	nop			; (mov r8, r8)
    1b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1b92:	bc08      	pop	{r3}
    1b94:	469e      	mov	lr, r3
    1b96:	4770      	bx	lr

00001b98 <__fini_array_start>:
    1b98:	000000b1 	.word	0x000000b1
